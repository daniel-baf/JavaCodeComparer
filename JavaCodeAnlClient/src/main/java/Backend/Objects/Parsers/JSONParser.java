
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Backend.Objects.Parsers;

import Backend.Objects.Lexers.JSONLexer;
import Backend.Objects.Parsers.JSONData.JSONActioner;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSONParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JSONParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSONParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\004\005\000\002\005\005\000\002" +
    "\006\005\000\002\010\005\000\002\007\005\000\002\011" +
    "\003\000\002\011\005\000\002\017\003\000\002\017\005" +
    "\000\002\022\003\000\002\022\005\000\002\025\003\000" +
    "\002\025\005\000\002\012\004\000\002\013\003\000\002" +
    "\013\005\000\002\014\007\000\002\014\004\000\002\015" +
    "\003\000\002\015\005\000\002\016\017\000\002\016\004" +
    "\000\002\020\003\000\002\020\005\000\002\021\017\000" +
    "\002\021\004\000\002\024\003\000\002\024\005\000\002" +
    "\023\007\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\004\005\001\002\000\004\002\151\001" +
    "\002\000\016\003\012\014\020\015\013\016\011\021\010" +
    "\024\021\001\002\000\006\005\ufff9\010\ufff9\001\002\000" +
    "\006\005\147\010\146\001\002\000\004\011\116\001\002" +
    "\000\004\011\066\001\002\000\006\005\ufff8\010\ufff8\001" +
    "\002\000\004\011\046\001\002\000\006\005\uffff\010\uffff" +
    "\001\002\000\006\005\ufffb\010\ufffb\001\002\000\006\005" +
    "\ufffd\010\ufffd\001\002\000\006\005\ufffa\010\ufffa\001\002" +
    "\000\004\011\044\001\002\000\004\011\023\001\002\000" +
    "\006\005\ufffc\010\ufffc\001\002\000\004\006\026\001\002" +
    "\000\006\005\uffec\010\uffec\001\002\000\006\005\ufff3\010" +
    "\ufff3\001\002\000\010\003\027\004\033\007\030\001\002" +
    "\000\004\005\043\001\002\000\006\005\uffea\010\uffea\001" +
    "\002\000\006\007\041\010\040\001\002\000\006\007\uffdd" +
    "\010\uffdd\001\002\000\004\013\034\001\002\000\004\011" +
    "\035\001\002\000\004\026\036\001\002\000\004\005\037" +
    "\001\002\000\006\007\uffdb\010\uffdb\001\002\000\006\003" +
    "\027\004\033\001\002\000\006\005\uffeb\010\uffeb\001\002" +
    "\000\006\007\uffdc\010\uffdc\001\002\000\006\007\uffda\010" +
    "\uffda\001\002\000\004\026\045\001\002\000\006\005\ufff7" +
    "\010\ufff7\001\002\000\004\006\050\001\002\000\006\005" +
    "\ufff2\010\ufff2\001\002\000\010\003\052\004\054\007\030" +
    "\001\002\000\006\005\ufff6\010\ufff6\001\002\000\004\005" +
    "\065\001\002\000\004\007\064\001\002\000\004\020\060" +
    "\001\002\000\006\007\uffe9\010\056\001\002\000\006\003" +
    "\052\004\054\001\002\000\004\007\uffe8\001\002\000\004" +
    "\011\061\001\002\000\004\026\062\001\002\000\004\005" +
    "\063\001\002\000\006\007\uffe7\010\uffe7\001\002\000\006" +
    "\005\ufff1\010\ufff1\001\002\000\006\007\uffe6\010\uffe6\001" +
    "\002\000\004\006\070\001\002\000\006\005\uffee\010\uffee" +
    "\001\002\000\010\003\072\004\074\007\030\001\002\000" +
    "\006\005\ufff4\010\ufff4\001\002\000\004\005\115\001\002" +
    "\000\006\007\113\010\112\001\002\000\004\020\076\001" +
    "\002\000\006\007\uffe1\010\uffe1\001\002\000\004\011\077" +
    "\001\002\000\004\026\100\001\002\000\004\010\101\001" +
    "\002\000\004\012\102\001\002\000\004\011\103\001\002" +
    "\000\004\026\104\001\002\000\004\010\105\001\002\000" +
    "\004\022\106\001\002\000\004\011\107\001\002\000\004" +
    "\023\110\001\002\000\004\005\111\001\002\000\006\007" +
    "\uffdf\010\uffdf\001\002\000\006\003\072\004\074\001\002" +
    "\000\006\005\uffed\010\uffed\001\002\000\006\007\uffe0\010" +
    "\uffe0\001\002\000\006\007\uffde\010\uffde\001\002\000\004" +
    "\006\120\001\002\000\006\005\ufff0\010\ufff0\001\002\000" +
    "\010\003\122\004\124\007\030\001\002\000\006\005\ufff5" +
    "\010\ufff5\001\002\000\004\005\145\001\002\000\006\007" +
    "\143\010\142\001\002\000\004\020\126\001\002\000\006" +
    "\007\uffe5\010\uffe5\001\002\000\004\011\127\001\002\000" +
    "\004\026\130\001\002\000\004\010\131\001\002\000\004" +
    "\012\132\001\002\000\004\011\133\001\002\000\004\026" +
    "\134\001\002\000\004\010\135\001\002\000\004\017\136" +
    "\001\002\000\004\011\137\001\002\000\004\026\140\001" +
    "\002\000\004\005\141\001\002\000\006\007\uffe3\010\uffe3" +
    "\001\002\000\006\003\122\004\124\001\002\000\006\005" +
    "\uffef\010\uffef\001\002\000\006\007\uffe4\010\uffe4\001\002" +
    "\000\006\007\uffe2\010\uffe2\001\002\000\016\003\012\014" +
    "\020\015\013\016\011\021\010\024\021\001\002\000\004" +
    "\002\000\001\002\000\006\005\ufffe\010\ufffe\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\006\004\015\005\021\006\014\007\005\010\016" +
    "\026\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\023\025\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\031\024\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\050\012\046\001\001\000\002\001\001\000\006" +
    "\013\052\014\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\066\022" +
    "\070\001\001\000\002\001\001\000\006\020\072\021\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\116\017\120\001\001\000\002\001\001\000\006\015\122" +
    "\016\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\015\005\021\006\014\007\005\010\016\026\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public JSONActioner jsonActioner;

    // constructor
    public JSONParser(JSONLexer lexer) {
        super(lexer);
        this.jsonActioner = new JSONActioner();
    }

    // error methods
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        try {
            // save error to be shown
            jsonActioner.addToHash("error");
            ArrayList<String> expectedTkns = new ArrayList<>();
            expected_token_ids().forEach(symT -> {
                expectedTkns.add(sym.terminalNames[symT]);
            });
            String value = cur_token.value  != null? cur_token.value.toString(): "NA";
            jsonActioner.addError(cur_token.left, cur_token.right, value, expectedTkns);
        } catch (Exception e) {
            System.out.println("unable to save error at json parser " + e.getMessage());
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("unrecovered sintax error");
    }   

    public JSONActioner getActioner() {
        return this.jsonActioner;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSONParser$actions {
  private final JSONParser parser;

  /** Constructor */
  CUP$JSONParser$actions(JSONParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action_part00000000(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONParser$parser.done_parsing();
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= BRACE_O json_content BRACE_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // json_content ::= json_content_available 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json_content",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // json_content ::= json_content COMMA json_content_available 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json_content",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // json_content_available ::= score_section 
            {
              Object RESULT =null;
		 jsonActioner.addToHash("score"); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json_content_available",20, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // json_content_available ::= classes_section 
            {
              Object RESULT =null;
		 jsonActioner.addToHash("classes"); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json_content_available",20, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // json_content_available ::= variables_section 
            {
              Object RESULT =null;
		 jsonActioner.addToHash("variables"); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json_content_available",20, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // json_content_available ::= methods_section 
            {
              Object RESULT =null;
		 jsonActioner.addToHash("methods"); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json_content_available",20, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // json_content_available ::= comments_section 
            {
              Object RESULT =null;
		 jsonActioner.addToHash("comments"); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json_content_available",20, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // json_content_available ::= error 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json_content_available",20, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // score_section ::= SCORE COLON STRING 
            {
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		String score = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 jsonActioner.saveScore(score); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("score_section",2, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classes_section ::= CLASSES COLON classes_content 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("classes_section",3, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variables_section ::= VARIABLES COLON variables_content 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("variables_section",4, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methods_section ::= METHODS COLON method_content 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("methods_section",6, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comments_section ::= COMMENTS COLON comments_content 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("comments_section",5, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classes_content ::= empty_section 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("classes_content",7, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classes_content ::= BRACKET_O classes_declarations BRACKET_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("classes_content",7, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables_content ::= empty_section 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("variables_content",13, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables_content ::= BRACKET_O variables_declarations BRACKET_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("variables_content",13, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_content ::= empty_section 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("method_content",16, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_content ::= BRACKET_O methods_declarations BRACKET_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("method_content",16, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comments_content ::= empty_section 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("comments_content",19, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comments_content ::= BRACKET_O comments_declarations BRACKET_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("comments_content",19, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // empty_section ::= BRACKET_O BRACKET_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("empty_section",8, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classes_declarations ::= class_declaration 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("classes_declarations",9, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classes_declarations ::= class_declaration COMMA class_declaration 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("classes_declarations",9, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // class_declaration ::= BRACE_O NAME COLON STRING BRACE_C 
            {
              Object RESULT =null;
		int classNleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int classNright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String classN = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 jsonActioner.saveClass(classN); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("class_declaration",10, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // class_declaration ::= error BRACE_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("class_declaration",10, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variables_declarations ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("variables_declarations",11, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variables_declarations ::= variables_declarations COMMA variable_declaration 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("variables_declarations",11, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable_declaration ::= BRACE_O NAME COLON STRING COMMA TYPE COLON STRING COMMA FUNCTION COLON STRING BRACE_C 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).value;
		int functionleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 jsonActioner.saveVariable(name,type,function); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("variable_declaration",12, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-12)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable_declaration ::= error BRACE_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("variable_declaration",12, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methods_declarations ::= method_declaration 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("methods_declarations",14, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // methods_declarations ::= methods_declarations COMMA method_declaration 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("methods_declarations",14, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_declaration ::= BRACE_O NAME COLON STRING COMMA TYPE COLON STRING COMMA PARAMETER COLON NUMBER BRACE_C 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		Object parameters = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 jsonActioner.saveMethod(name,type,parameters.toString()); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("method_declaration",15, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-12)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_declaration ::= error BRACE_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("method_declaration",15, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comments_declarations ::= comment_declaration 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("comments_declarations",18, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comments_declarations ::= comments_declarations COMMA comment_declaration 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("comments_declarations",18, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comment_declaration ::= BRACE_O TEXT COLON STRING BRACE_C 
            {
              Object RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 jsonActioner.saveComment(comment); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("comment_declaration",17, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comment_declaration ::= error BRACE_C 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("comment_declaration",17, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSONParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
              return CUP$JSONParser$do_action_part00000000(
                               CUP$JSONParser$act_num,
                               CUP$JSONParser$parser,
                               CUP$JSONParser$stack,
                               CUP$JSONParser$top);
    }
}

}
