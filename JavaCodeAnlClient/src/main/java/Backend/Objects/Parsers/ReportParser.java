
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Backend.Objects.Parsers;

import Backend.Objects.Lexers.ReportLexer;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ReportParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return repSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ReportParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ReportParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ReportParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\005\000\002\005\003\000\002\005\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\007\004\000\002\007\005\000\002\025" +
    "\004\000\002\025\005\000\002\026\003\000\002\027\004" +
    "\000\002\027\005\000\002\033\003\000\002\033\004\000" +
    "\002\034\003\000\002\034\005\000\002\047\004\000\002" +
    "\047\005\000\002\035\003\000\002\035\005\000\002\050" +
    "\003\000\002\050\003\000\002\036\003\000\002\036\004" +
    "\000\002\037\003\000\002\037\004\000\002\040\004\000" +
    "\002\040\005\000\002\041\004\000\002\041\005\000\002" +
    "\030\004\000\002\030\005\000\002\031\013\000\002\042" +
    "\003\000\002\042\004\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\043\007\000" +
    "\002\045\003\000\002\045\003\000\002\003\003\000\002" +
    "\003\004\000\002\010\005\000\002\010\007\000\002\010" +
    "\003\000\002\011\003\000\002\011\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\003\000\002\013\006\000\002" +
    "\013\010\000\002\014\003\000\002\014\006\000\002\014" +
    "\010\000\002\016\003\000\002\016\006\000\002\016\010" +
    "\000\002\020\003\000\002\020\006\000\002\020\010\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\023\003" +
    "\000\002\023\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\021\003\000\002\021" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\012\003\011\032\005\036\010\037\007\001" +
    "\002\000\004\002\uffff\001\002\000\004\062\uffa5\001\002" +
    "\000\004\002\227\001\002\000\016\003\126\041\117\043" +
    "\123\045\116\047\124\057\121\001\002\000\004\062\uffa4" +
    "\001\002\000\012\003\uffcb\032\uffcb\036\uffcb\037\uffcb\001" +
    "\002\000\012\003\uffcf\032\uffcf\036\uffcf\037\uffcf\001\002" +
    "\000\012\003\011\032\005\036\010\037\007\001\002\000" +
    "\004\062\015\001\002\000\006\007\016\011\017\001\002" +
    "\000\012\003\uffcd\032\uffcd\036\uffcd\037\uffcd\001\002\000" +
    "\014\020\023\027\030\060\020\061\024\062\025\001\002" +
    "\000\020\007\uffac\014\uffac\015\uffac\016\uffac\017\uffac\021" +
    "\uffac\063\uffac\001\002\000\014\007\106\014\102\015\104" +
    "\016\100\017\103\001\002\000\016\007\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\021\uffb1\001\002\000\014\020\023" +
    "\027\030\060\020\061\024\062\025\001\002\000\016\007" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\021\uffad\001\002" +
    "\000\020\007\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021" +
    "\uffaa\063\uffaa\001\002\000\020\007\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\021\uffab\063\uffab\001\002\000\016\007" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\021\uffae\001\002" +
    "\000\022\004\031\007\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\021\uffca\063\uffca\001\002\000\014\023\041\026\035" +
    "\030\034\033\033\035\042\001\002\000\020\007\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\063\uffc4\001\002" +
    "\000\022\005\066\007\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\021\uffc0\063\uffc0\001\002\000\022\005\056\007\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\063\uffbd\001" +
    "\002\000\022\005\051\007\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\021\uffc3\063\uffc3\001\002\000\020\007\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\063\uffc5\001\002" +
    "\000\020\007\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\021" +
    "\uffc7\063\uffc7\001\002\000\020\007\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\021\uffc6\063\uffc6\001\002\000\020\007" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8\063\uffc8" +
    "\001\002\000\022\005\044\007\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\021\uffba\063\uffba\001\002\000\020\007\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\063\uffc9\001" +
    "\002\000\004\060\045\001\002\000\004\006\046\001\002" +
    "\000\022\004\047\007\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\021\uffb9\063\uffb9\001\002\000\004\024\050\001\002" +
    "\000\020\007\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021" +
    "\uffb8\063\uffb8\001\002\000\004\060\052\001\002\000\004" +
    "\006\053\001\002\000\022\004\054\007\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\021\uffc2\063\uffc2\001\002\000\004" +
    "\025\055\001\002\000\020\007\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\021\uffc1\063\uffc1\001\002\000\004\060\057" +
    "\001\002\000\004\006\060\001\002\000\022\004\061\007" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\021\uffbc\063\uffbc" +
    "\001\002\000\010\022\065\025\063\034\064\001\002\000" +
    "\020\007\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb" +
    "\063\uffbb\001\002\000\020\007\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\021\uffb4\063\uffb4\001\002\000\020\007\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\063\uffb2\001" +
    "\002\000\020\007\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\021\uffb3\063\uffb3\001\002\000\004\060\067\001\002\000" +
    "\004\006\070\001\002\000\022\004\071\007\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\021\uffbf\063\uffbf\001\002\000" +
    "\010\022\075\025\073\031\074\001\002\000\020\007\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\063\uffbe\001" +
    "\002\000\020\007\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\021\uffb7\063\uffb7\001\002\000\020\007\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\021\uffb5\063\uffb5\001\002\000\020" +
    "\007\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6\063" +
    "\uffb6\001\002\000\014\014\102\015\104\016\100\017\103" +
    "\021\077\001\002\000\016\007\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\021\uffaf\001\002\000\014\020\uffa7\027\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\001\002\000\014\020\023\027" +
    "\030\060\020\061\024\062\025\001\002\000\014\020\uffa9" +
    "\027\uffa9\060\uffa9\061\uffa9\062\uffa9\001\002\000\014\020" +
    "\uffa6\027\uffa6\060\uffa6\061\uffa6\062\uffa6\001\002\000\014" +
    "\020\uffa8\027\uffa8\060\uffa8\061\uffa8\062\uffa8\001\002\000" +
    "\016\007\uffb0\014\102\015\104\016\100\017\103\021\uffb0" +
    "\001\002\000\012\003\uffcc\032\uffcc\036\uffcc\037\uffcc\001" +
    "\002\000\004\002\000\001\002\000\012\003\uffce\032\uffce" +
    "\036\uffce\037\uffce\001\002\000\022\003\ufffb\040\ufffb\041" +
    "\ufffb\043\ufffb\045\ufffb\047\ufffb\050\ufffb\057\ufffb\001\002" +
    "\000\022\003\ufff9\040\ufff9\041\ufff9\043\ufff9\045\ufff9\047" +
    "\ufff9\050\ufff9\057\ufff9\001\002\000\020\003\126\041\117" +
    "\043\123\045\116\047\124\050\224\057\121\001\002\000" +
    "\022\003\ufff6\040\ufff6\041\ufff6\043\ufff6\045\ufff6\047\ufff6" +
    "\050\ufff6\057\ufff6\001\002\000\022\003\ufffd\040\ufffd\041" +
    "\ufffd\043\ufffd\045\ufffd\047\ufffd\050\ufffd\057\ufffd\001\002" +
    "\000\010\046\166\047\124\051\170\001\002\000\014\003" +
    "\145\013\144\042\162\062\142\065\150\001\002\000\022" +
    "\003\ufff5\040\ufff5\041\ufff5\043\ufff5\045\ufff5\047\ufff5\050" +
    "\ufff5\057\ufff5\001\002\000\022\003\ufff0\040\ufff0\041\ufff0" +
    "\043\ufff0\045\ufff0\047\ufff0\050\ufff0\057\ufff0\001\002\000" +
    "\022\003\ufffa\040\ufffa\041\ufffa\043\ufffa\045\ufffa\047\ufffa" +
    "\050\ufffa\057\ufffa\001\002\000\014\003\145\013\144\044" +
    "\146\062\142\065\150\001\002\000\004\064\132\001\002" +
    "\000\020\003\126\040\130\041\117\043\123\045\116\047" +
    "\124\057\121\001\002\000\022\003\ufff8\040\ufff8\041\ufff8" +
    "\043\ufff8\045\ufff8\047\ufff8\050\ufff8\057\ufff8\001\002\000" +
    "\022\003\ufff7\040\ufff7\041\ufff7\043\ufff7\045\ufff7\047\ufff7" +
    "\050\ufff7\057\ufff7\001\002\000\004\002\ufffe\001\002\000" +
    "\022\003\ufffc\040\ufffc\041\ufffc\043\ufffc\045\ufffc\047\ufffc" +
    "\050\ufffc\057\ufffc\001\002\000\004\010\133\001\002\000" +
    "\010\027\030\060\020\062\025\001\002\000\004\063\135" +
    "\001\002\000\004\010\136\001\002\000\010\027\030\060" +
    "\020\062\025\001\002\000\004\007\140\001\002\000\004" +
    "\012\141\001\002\000\026\003\uffd9\041\uffd9\043\uffd9\045" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\055\uffd9\057\uffd9" +
    "\001\002\000\022\003\uffd5\013\uffd5\042\uffd5\044\uffd5\054" +
    "\uffd5\056\uffd5\062\uffd5\065\uffd5\001\002\000\022\003\uffd8" +
    "\013\uffd8\042\uffd8\044\uffd8\054\uffd8\056\uffd8\062\uffd8\065" +
    "\uffd8\001\002\000\004\020\154\001\002\000\022\003\uffd3" +
    "\013\uffd3\042\uffd3\044\uffd3\054\uffd3\056\uffd3\062\uffd3\065" +
    "\uffd3\001\002\000\022\003\ufff2\040\ufff2\041\ufff2\043\ufff2" +
    "\045\ufff2\047\ufff2\050\ufff2\057\ufff2\001\002\000\022\003" +
    "\uffd6\013\uffd6\042\uffd6\044\uffd6\054\uffd6\056\uffd6\062\uffd6" +
    "\065\uffd6\001\002\000\022\003\uffd4\013\uffd4\042\uffd4\044" +
    "\uffd4\054\uffd4\056\uffd4\062\uffd4\065\uffd4\001\002\000\014" +
    "\003\145\013\144\044\153\062\142\065\150\001\002\000" +
    "\022\003\uffd7\013\uffd7\042\uffd7\044\uffd7\054\uffd7\056\uffd7" +
    "\062\uffd7\065\uffd7\001\002\000\022\003\ufff1\040\ufff1\041" +
    "\ufff1\043\ufff1\045\ufff1\047\ufff1\050\ufff1\057\ufff1\001\002" +
    "\000\006\027\030\062\155\001\002\000\004\021\uffd0\001" +
    "\002\000\004\021\160\001\002\000\004\021\uffd1\001\002" +
    "\000\004\013\161\001\002\000\022\003\uffd2\013\uffd2\042" +
    "\uffd2\044\uffd2\054\uffd2\056\uffd2\062\uffd2\065\uffd2\001\002" +
    "\000\022\003\ufff4\040\ufff4\041\ufff4\043\ufff4\045\ufff4\047" +
    "\ufff4\050\ufff4\057\ufff4\001\002\000\014\003\145\013\144" +
    "\042\164\062\142\065\150\001\002\000\022\003\ufff3\040" +
    "\ufff3\041\ufff3\043\ufff3\045\ufff3\047\ufff3\050\ufff3\057\ufff3" +
    "\001\002\000\004\051\170\001\002\000\022\003\uffef\040" +
    "\uffef\041\uffef\043\uffef\045\uffef\047\uffef\050\uffef\057\uffef" +
    "\001\002\000\010\046\uffed\047\uffed\051\uffed\001\002\000" +
    "\012\047\124\052\206\053\177\055\200\001\002\000\010" +
    "\046\uffeb\047\uffeb\051\uffeb\001\002\000\010\046\173\047" +
    "\124\051\170\001\002\000\022\003\uffee\040\uffee\041\uffee" +
    "\043\uffee\045\uffee\047\uffee\050\uffee\057\uffee\001\002\000" +
    "\010\046\uffec\047\uffec\051\uffec\001\002\000\006\053\177" +
    "\055\200\001\002\000\004\052\217\001\002\000\014\003" +
    "\145\013\144\054\214\062\142\065\150\001\002\000\014" +
    "\003\145\013\144\056\211\062\142\065\150\001\002\000" +
    "\010\050\uffe3\052\uffe3\055\uffe3\001\002\000\004\052\uffe7" +
    "\001\002\000\010\050\uffe5\052\uffe5\055\200\001\002\000" +
    "\010\050\uffe1\052\uffe1\053\uffe1\001\002\000\010\050\uffe4" +
    "\052\uffe4\053\177\001\002\000\012\046\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\001\002\000\010\050\uffe0\052\uffe0\053\uffe0" +
    "\001\002\000\010\050\uffe2\052\uffe2\055\uffe2\001\002\000" +
    "\010\050\uffdf\052\uffdf\055\uffdf\001\002\000\014\003\145" +
    "\013\144\056\213\062\142\065\150\001\002\000\010\050" +
    "\uffde\052\uffde\055\uffde\001\002\000\010\050\uffdd\052\uffdd" +
    "\053\uffdd\001\002\000\014\003\145\013\144\054\216\062" +
    "\142\065\150\001\002\000\010\050\uffdc\052\uffdc\053\uffdc" +
    "\001\002\000\012\046\uffe8\047\uffe8\050\uffe8\051\uffe8\001" +
    "\002\000\004\050\221\001\002\000\004\052\uffe6\001\002" +
    "\000\004\050\223\001\002\000\010\046\uffea\047\uffea\051" +
    "\uffea\001\002\000\022\003\uffdb\040\uffdb\041\uffdb\043\uffdb" +
    "\045\uffdb\047\uffdb\050\uffdb\057\uffdb\001\002\000\020\003" +
    "\126\041\117\043\123\045\116\047\124\050\226\057\121" +
    "\001\002\000\022\003\uffda\040\uffda\041\uffda\043\uffda\045" +
    "\uffda\047\uffda\050\uffda\057\uffda\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\014\002\005\003\012\004\003\010\011\021" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\124\006\114\007\126\025\113\026" +
    "\117\027\121\030\111\031\112\046\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\106\010\107\021\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\025\022\020\023" +
    "\021\032\026\001\001\000\002\001\001\000\004\024\100" +
    "\001\001\000\002\001\001\000\012\011\025\022\075\023" +
    "\021\032\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\042\013\036\014\037\016\035\020\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\025\022\104\023" +
    "\021\032\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\224\006\114\007\126\025" +
    "\113\026\117\027\121\030\111\031\112\046\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\031\164\033" +
    "\171\034\166\047\170\001\001\000\010\042\162\043\146" +
    "\044\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\150\043\146\044\142\001\001" +
    "\000\002\001\001\000\022\006\130\007\126\025\113\026" +
    "\117\027\121\030\111\031\112\046\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\025\032\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\025\032" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\146\044\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\156\045\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\146\044\151\001\001\000\002\001\001\000" +
    "\004\047\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\031\174\035\175\036\202\037\204\040\200\041" +
    "\203\050\201\001\001\000\002\001\001\000\010\031\164" +
    "\034\173\047\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\036\202\037\204\040\200\041\203\050\217" +
    "\001\001\000\002\001\001\000\010\042\214\043\146\044" +
    "\142\001\001\000\010\042\211\043\146\044\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\207\001" +
    "\001\000\002\001\001\000\004\041\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\146\044\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\146\044\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\130\007\126\025\113\026\117\027\121" +
    "\030\111\031\112\046\110\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ReportParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ReportParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ReportParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ReportParser(ReportLexer lexer) {
        super(lexer);
    }

    // error methods
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(String.format("El error es el simbolo: %1$s, en posicion: %2$d, %3$d", sym.terminalNames[cur_token.sym], cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("unrecovered sintax error");
    }   



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ReportParser$actions {
  private final ReportParser parser;

  /** Constructor */
  CUP$ReportParser$actions(ReportParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ReportParser$do_action_part00000000(
    int                        CUP$ReportParser$act_num,
    java_cup.runtime.lr_parser CUP$ReportParser$parser,
    java.util.Stack            CUP$ReportParser$stack,
    int                        CUP$ReportParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ReportParser$result;

      /* select the action based on the action number */
      switch (CUP$ReportParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)).value;
		RESULT = start_val;
              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ReportParser$parser.done_parsing();
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= var_declaration_section html_section 
            {
              Object RESULT =null;
		 System.out.println("OK"); 
              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= html_section 
            {
              Object RESULT =null;
		 System.out.println("OK"); 
              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // html_section ::= HTML_O html_content HTML_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_section",2, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // html_content ::= html_content_available 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content",3, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // html_content ::= html_content html_content_available 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content",3, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // html_content_available ::= html_content_available_common 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content_available",4, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // html_content_available ::= table_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content_available",4, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // html_content_available ::= for_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content_available",4, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // html_content_available ::= error 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content_available",4, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // html_content_available_common ::= h1_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content_available_common",36, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // html_content_available_common ::= h2_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content_available_common",36, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // html_content_available_common ::= br_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content_available_common",36, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // h1_declaration ::= H1_O H1_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("h1_declaration",5, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // h1_declaration ::= H1_O data_content H1_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("h1_declaration",5, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // h2_declaration ::= H2_O H2_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("h2_declaration",19, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // h2_declaration ::= H2_O data_content H2_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("h2_declaration",19, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // br_declaration ::= BR 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("br_declaration",20, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // table_declaration ::= TABLE_O TABLE_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_declaration",21, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // table_declaration ::= TABLE_O table_content TABLE_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_declaration",21, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // table_content ::= table_row_delaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_content",25, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // table_content ::= table_content table_row_delaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_content",25, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // table_row_delaration ::= table_row_declaration_sub 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_delaration",26, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // table_row_delaration ::= for_open table_row_declaration_sub FOR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_delaration",26, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // table_row_declaration_sub ::= TR_O TR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_declaration_sub",37, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // table_row_declaration_sub ::= TR_O table_row_content TR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_declaration_sub",37, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // table_row_content ::= table_row_content_sub 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_content",27, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // table_row_content ::= for_open table_row_content_sub FOR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_content",27, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // table_row_content_sub ::= table_row_datas 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_content_sub",38, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // table_row_content_sub ::= table_row_headers 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_content_sub",38, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // table_row_datas ::= table_row_content_data 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_datas",28, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // table_row_datas ::= table_row_datas table_row_content_data 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_datas",28, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // table_row_headers ::= table_row_content_header 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_headers",29, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // table_row_headers ::= table_row_headers table_row_content_header 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_headers",29, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // table_row_content_data ::= TD_O TD_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_content_data",30, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // table_row_content_data ::= TD_O data_content TD_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_content_data",30, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // table_row_content_header ::= TH_O TH_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_content_header",31, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // table_row_content_header ::= TH_O data_content TH_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_row_content_header",31, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for_declaration ::= for_open FOR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("for_declaration",22, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for_declaration ::= for_open html_content FOR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("for_declaration",22, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // for_open ::= FOR_O ITERATOR COLON element_var UNTIL COLON element_var SEMICOLON GT 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("for_open",23, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-8)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // data_content ::= data_content_values 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_content",32, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // data_content ::= data_content data_content_values 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_content",32, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // data_content_values ::= data_access 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_content_values",34, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // data_content_values ::= ID 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_content_values",34, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // data_content_values ::= UNKNOWN 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_content_values",34, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // data_content_values ::= error 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_content_values",34, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // data_access ::= DOLAR PAR_O data_access_value PAR_C DOLAR 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_access",33, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // data_access_value ::= result_data 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_access_value",35, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // data_access_value ::= ID 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_access_value",35, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_declaration_section ::= var_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("var_declaration_section",1, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_declaration_section ::= var_declaration_section var_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("var_declaration_section",1, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_declaration ::= typeOf ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_declaration ::= typeOf ID EQUALS arithm_expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_declaration ::= error 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // result_data ::= RESULT 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data",7, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // result_data ::= RESULT DOT result_data_children 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data",7, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // result_data_children ::= SCORE 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_children",8, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // result_data_children ::= result_data_classes 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_children",8, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // result_data_children ::= result_data_variables 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_children",8, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // result_data_children ::= result_data_methods 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_children",8, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // result_data_children ::= result_data_comments 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_children",8, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // result_data_classes ::= CLASSES 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_classes",9, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // result_data_classes ::= CLASSES BRACK_O NUMBER BRACK_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_classes",9, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // result_data_classes ::= CLASSES BRACK_O NUMBER BRACK_C DOT NAME 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_classes",9, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // result_data_variables ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables",10, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // result_data_variables ::= VARIABLES BRACK_O NUMBER BRACK_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables",10, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // result_data_variables ::= VARIABLES BRACK_O NUMBER BRACK_C DOT result_data_variables_children 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables",10, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // result_data_methods ::= METHODS 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods",12, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // result_data_methods ::= METHODS BRACK_O NUMBER BRACK_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods",12, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // result_data_methods ::= METHODS BRACK_O NUMBER BRACK_C DOT result_data_methods_children 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods",12, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // result_data_comments ::= COMMENTS 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_comments",14, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // result_data_comments ::= COMMENTS BRACK_O NUMBER BRACK_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_comments",14, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // result_data_comments ::= COMMENTS BRACK_O NUMBER BRACK_C DOT TEXT 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_comments",14, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // result_data_variables_children ::= NAME 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables_children",11, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // result_data_variables_children ::= TYPE 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables_children",11, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // result_data_variables_children ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables_children",11, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // result_data_methods_children ::= NAME 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods_children",13, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // result_data_methods_children ::= TYPE 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods_children",13, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // result_data_methods_children ::= PARAMETERS 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods_children",13, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arithm_expr ::= element 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("arithm_expr",16, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arithm_expr ::= arithm_expr sym_arithm arithm_expr 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("arithm_expr",16, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arithm_expr ::= PAR_O arithm_expr PAR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("arithm_expr",16, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // element ::= element_var 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("element",17, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // element ::= STRING 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("element",17, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // element_var ::= NUMBER 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("element_var",24, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // element_var ::= result_data 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("element_var",24, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // element_var ::= ID 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("element_var",24, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sym_arithm ::= PLUS 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",18, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sym_arithm ::= LESS 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",18, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sym_arithm ::= MULT 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",18, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sym_arithm ::= DIV 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",18, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // typeOf ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("typeOf",15, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // typeOf ::= STRING_TYPE 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("typeOf",15, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ReportParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ReportParser$do_action(
    int                        CUP$ReportParser$act_num,
    java_cup.runtime.lr_parser CUP$ReportParser$parser,
    java.util.Stack            CUP$ReportParser$stack,
    int                        CUP$ReportParser$top)
    throws java.lang.Exception
    {
              return CUP$ReportParser$do_action_part00000000(
                               CUP$ReportParser$act_num,
                               CUP$ReportParser$parser,
                               CUP$ReportParser$stack,
                               CUP$ReportParser$top);
    }
}

}
