
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Backend.Objects.Parsers;

import Backend.Objects.Lexers.ReportLexer;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ReportParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return repSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ReportParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ReportParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ReportParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\005\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\011\004\000\002\011\005\000\002\012\004\000\002\012" +
    "\005\000\002\013\003\000\002\007\004\000\002\007\005" +
    "\000\002\010\004\000\002\010\005\000\002\015\013\000" +
    "\002\014\007\000\002\014\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\003\000\002\020\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\006\000\002\022\010\000\002" +
    "\024\003\000\002\024\006\000\002\024\010\000\002\023" +
    "\003\000\002\023\006\000\002\023\010\000\002\025\003" +
    "\000\002\025\006\000\002\025\010\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\005\006\001\002\000\004\002\134\001" +
    "\002\000\004\002\000\001\002\000\016\004\007\007\015" +
    "\011\021\013\014\015\022\024\020\001\002\000\004\002" +
    "\uffff\001\002\000\020\004\ufff9\007\ufff9\011\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\024\ufff9\001\002\000\016\007\015\011" +
    "\021\013\014\014\131\015\022\024\020\001\002\000\020" +
    "\004\ufffd\007\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd\024" +
    "\ufffd\001\002\000\020\004\ufff7\007\ufff7\011\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\024\ufff7\001\002\000\014\012\127\026" +
    "\032\030\042\045\115\054\034\001\002\000\014\006\124" +
    "\026\032\030\042\045\115\054\034\001\002\000\020\004" +
    "\ufff6\007\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\024\ufff6" +
    "\001\002\000\020\004\ufffa\007\ufffa\011\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\024\ufffa\001\002\000\020\004\ufff1\007\ufff1" +
    "\011\ufff1\013\ufff1\014\ufff1\015\ufff1\024\ufff1\001\002\000" +
    "\014\010\112\026\032\030\042\045\115\054\034\001\002" +
    "\000\004\060\030\001\002\000\016\004\026\007\015\011" +
    "\021\013\014\015\022\024\020\001\002\000\020\004\ufff8" +
    "\007\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\024\ufff8\001" +
    "\002\000\020\004\ufffb\007\ufffb\011\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\024\ufffb\001\002\000\004\002\ufffe\001\002\000" +
    "\020\004\ufffc\007\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\024\ufffc\001\002\000\004\035\031\001\002\000\006\026" +
    "\032\054\034\001\002\000\016\006\uffe7\010\uffe7\012\uffe7" +
    "\034\uffe7\042\uffe7\050\uffe7\001\002\000\016\006\uffe6\010" +
    "\uffe6\012\uffe6\034\uffe6\042\uffe6\050\uffe6\001\002\000\020" +
    "\006\uffe5\010\uffe5\012\uffe5\031\045\034\uffe5\042\uffe5\050" +
    "\uffe5\001\002\000\004\050\036\001\002\000\004\035\037" +
    "\001\002\000\010\026\032\030\042\054\034\001\002\000" +
    "\004\034\043\001\002\000\012\006\uffe8\010\uffe8\012\uffe8" +
    "\034\uffe8\001\002\000\012\006\uffe9\010\uffe9\012\uffe9\034" +
    "\uffe9\001\002\000\004\065\044\001\002\000\016\007\uffec" +
    "\011\uffec\013\uffec\014\uffec\015\uffec\024\uffec\001\002\000" +
    "\014\047\056\053\051\055\050\061\047\063\057\001\002" +
    "\000\016\006\uffdf\010\uffdf\012\uffdf\034\uffdf\042\uffdf\050" +
    "\uffdf\001\002\000\020\006\uffdb\010\uffdb\012\uffdb\033\102" +
    "\034\uffdb\042\uffdb\050\uffdb\001\002\000\020\006\uffd8\010" +
    "\uffd8\012\uffd8\033\072\034\uffd8\042\uffd8\050\uffd8\001\002" +
    "\000\020\006\uffde\010\uffde\012\uffde\033\065\034\uffde\042" +
    "\uffde\050\uffde\001\002\000\016\006\uffe0\010\uffe0\012\uffe0" +
    "\034\uffe0\042\uffe0\050\uffe0\001\002\000\016\006\uffe2\010" +
    "\uffe2\012\uffe2\034\uffe2\042\uffe2\050\uffe2\001\002\000\016" +
    "\006\uffe1\010\uffe1\012\uffe1\034\uffe1\042\uffe1\050\uffe1\001" +
    "\002\000\016\006\uffe4\010\uffe4\012\uffe4\034\uffe4\042\uffe4" +
    "\050\uffe4\001\002\000\016\006\uffe3\010\uffe3\012\uffe3\034" +
    "\uffe3\042\uffe3\050\uffe3\001\002\000\020\006\uffd5\010\uffd5" +
    "\012\uffd5\033\060\034\uffd5\042\uffd5\050\uffd5\001\002\000" +
    "\004\030\061\001\002\000\004\032\062\001\002\000\020" +
    "\006\uffd4\010\uffd4\012\uffd4\031\063\034\uffd4\042\uffd4\050" +
    "\uffd4\001\002\000\004\064\064\001\002\000\016\006\uffd3" +
    "\010\uffd3\012\uffd3\034\uffd3\042\uffd3\050\uffd3\001\002\000" +
    "\004\030\066\001\002\000\004\032\067\001\002\000\020" +
    "\006\uffdd\010\uffdd\012\uffdd\031\070\034\uffdd\042\uffdd\050" +
    "\uffdd\001\002\000\004\052\071\001\002\000\016\006\uffdc" +
    "\010\uffdc\012\uffdc\034\uffdc\042\uffdc\050\uffdc\001\002\000" +
    "\004\030\073\001\002\000\004\032\074\001\002\000\020" +
    "\006\uffd7\010\uffd7\012\uffd7\031\075\034\uffd7\042\uffd7\050" +
    "\uffd7\001\002\000\010\046\101\052\077\062\100\001\002" +
    "\000\016\006\uffd6\010\uffd6\012\uffd6\034\uffd6\042\uffd6\050" +
    "\uffd6\001\002\000\016\006\uffcf\010\uffcf\012\uffcf\034\uffcf" +
    "\042\uffcf\050\uffcf\001\002\000\016\006\uffcd\010\uffcd\012" +
    "\uffcd\034\uffcd\042\uffcd\050\uffcd\001\002\000\016\006\uffce" +
    "\010\uffce\012\uffce\034\uffce\042\uffce\050\uffce\001\002\000" +
    "\004\030\103\001\002\000\004\032\104\001\002\000\020" +
    "\006\uffda\010\uffda\012\uffda\031\105\034\uffda\042\uffda\050" +
    "\uffda\001\002\000\010\046\111\052\107\056\110\001\002" +
    "\000\016\006\uffd9\010\uffd9\012\uffd9\034\uffd9\042\uffd9\050" +
    "\uffd9\001\002\000\016\006\uffd2\010\uffd2\012\uffd2\034\uffd2" +
    "\042\uffd2\050\uffd2\001\002\000\016\006\uffd0\010\uffd0\012" +
    "\uffd0\034\uffd0\042\uffd0\050\uffd0\001\002\000\016\006\uffd1" +
    "\010\uffd1\012\uffd1\034\uffd1\042\uffd1\050\uffd1\001\002\000" +
    "\020\004\ufff3\007\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\024\ufff3\001\002\000\010\006\uffea\010\uffea\012\uffea\001" +
    "\002\000\004\010\122\001\002\000\004\043\116\001\002" +
    "\000\006\026\032\054\034\001\002\000\004\042\120\001" +
    "\002\000\004\045\121\001\002\000\010\006\uffeb\010\uffeb" +
    "\012\uffeb\001\002\000\020\004\ufff2\007\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\024\ufff2\001\002\000\004\006\125" +
    "\001\002\000\020\004\ufff5\007\ufff5\011\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\024\ufff5\001\002\000\020\004\ufff4\007\ufff4" +
    "\011\ufff4\013\ufff4\014\ufff4\015\ufff4\024\ufff4\001\002\000" +
    "\004\012\130\001\002\000\020\004\ufff0\007\ufff0\011\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\024\ufff0\001\002\000\020\004" +
    "\uffef\007\uffef\011\uffef\013\uffef\014\uffef\015\uffef\024\uffef" +
    "\001\002\000\020\004\uffee\007\uffee\011\uffee\013\uffee\014" +
    "\uffee\015\uffee\024\uffee\001\002\000\016\007\015\011\021" +
    "\013\014\014\133\015\022\024\020\001\002\000\020\004" +
    "\uffed\007\uffed\011\uffed\013\uffed\014\uffed\015\uffed\024\uffed" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\022\005\011\006\024" +
    "\007\016\010\007\011\023\012\012\013\015\015\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\131" +
    "\005\011\006\024\007\016\010\007\011\023\012\012\013" +
    "\015\015\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\125\016\112\017\040\020\032\001\001\000" +
    "\012\014\122\016\112\017\040\020\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\113\016\112\017\040\020\032\001\001\000\002\001\001" +
    "\000\022\005\026\006\024\007\016\010\007\011\023\012" +
    "\012\013\015\015\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\034\020\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\037\017\040\020\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\021\054\022\052" +
    "\023\051\024\053\025\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\116\020\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\026\006\024\007\016\010\007" +
    "\011\023\012\012\013\015\015\010\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ReportParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ReportParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ReportParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ReportParser(ReportLexer lexer) {
        super(lexer);
    }

    // error methods
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(String.format("El error es el simbolo: %1$s, en posicion: %2$d, %3$d", sym.terminalNames[cur_token.sym], cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("unrecovered sintax error");
    }   



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ReportParser$actions {
  private final ReportParser parser;

  /** Constructor */
  CUP$ReportParser$actions(ReportParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ReportParser$do_action_part00000000(
    int                        CUP$ReportParser$act_num,
    java_cup.runtime.lr_parser CUP$ReportParser$parser,
    java.util.Stack            CUP$ReportParser$stack,
    int                        CUP$ReportParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ReportParser$result;

      /* select the action based on the action number */
      switch (CUP$ReportParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)).value;
		RESULT = start_val;
              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ReportParser$parser.done_parsing();
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= html_section 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html_section ::= HTML_O HTML_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_section",1, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // html_section ::= HTML_O html_content HTML_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_section",1, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // html_content ::= html_declarations 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content",2, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // html_content ::= html_content html_declarations 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_content",2, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // html_declarations ::= html_declarations_global 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_declarations",3, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // html_declarations ::= table_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_declarations",3, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // html_declarations ::= for_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_declarations",3, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // html_declarations_global ::= h1_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_declarations_global",4, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // html_declarations_global ::= h2_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_declarations_global",4, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // html_declarations_global ::= br_declaration 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("html_declarations_global",4, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // h1_declaration ::= H1_O H1_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("h1_declaration",7, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // h1_declaration ::= H1_O data_set H1_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("h1_declaration",7, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // h2_declaration ::= H2_O H2_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("h2_declaration",8, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // h2_declaration ::= H2_O data_set H2_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("h2_declaration",8, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // br_declaration ::= BR 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("br_declaration",9, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // table_declaration ::= TABLE_O TABLE_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_declaration",5, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // table_declaration ::= TABLE_O data_set TABLE_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("table_declaration",5, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for_declaration ::= for_open FOR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("for_declaration",6, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for_declaration ::= for_open html_content FOR_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("for_declaration",6, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for_open ::= FOR_O ITERATOR COLON id_vals UNTIL COLON element SEMICOLON LT 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("for_open",11, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-8)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_set ::= DOLAR PAR_O id_vals PAR_C DOLAR 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_set",10, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_set ::= element 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("data_set",10, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // element ::= NUMBER 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("element",12, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // element ::= id_vals 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("element",12, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // id_vals ::= ID 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("id_vals",13, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // id_vals ::= result_object 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("id_vals",13, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // result_object ::= RESULT_T 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_object",14, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // result_object ::= RESULT_T DOT result_object_attrs 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_object",14, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // result_object_attrs ::= SCORE 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_object_attrs",15, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // result_object_attrs ::= result_data_classes 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_object_attrs",15, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // result_object_attrs ::= result_data_variables 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_object_attrs",15, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // result_object_attrs ::= result_data_methods 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_object_attrs",15, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // result_object_attrs ::= result_data_comments 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_object_attrs",15, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // result_data_classes ::= CLASSES 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_classes",16, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // result_data_classes ::= CLASSES BRACK_O NUMBER BRACK_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_classes",16, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // result_data_classes ::= CLASSES BRACK_O NUMBER BRACK_C DOT NAME 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_classes",16, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // result_data_variables ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables",18, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // result_data_variables ::= VARIABLES BRACK_O NUMBER BRACK_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables",18, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // result_data_variables ::= VARIABLES BRACK_O NUMBER BRACK_C DOT result_data_variables_children 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables",18, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // result_data_methods ::= METHODS 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods",17, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // result_data_methods ::= METHODS BRACK_O NUMBER BRACK_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods",17, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // result_data_methods ::= METHODS BRACK_O NUMBER BRACK_C DOT result_data_methods_children 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods",17, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // result_data_comments ::= COMMENTS 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_comments",19, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // result_data_comments ::= COMMENTS BRACK_O NUMBER BRACK_C 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_comments",19, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // result_data_comments ::= COMMENTS BRACK_O NUMBER BRACK_C DOT TEXT 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_comments",19, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.elementAt(CUP$ReportParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // result_data_variables_children ::= NAME 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables_children",20, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // result_data_variables_children ::= TYPE 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables_children",20, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // result_data_variables_children ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_variables_children",20, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // result_data_methods_children ::= NAME 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods_children",21, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // result_data_methods_children ::= TYPE 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods_children",21, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // result_data_methods_children ::= PARAMETERS 
            {
              Object RESULT =null;

              CUP$ReportParser$result = parser.getSymbolFactory().newSymbol("result_data_methods_children",21, ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportParser$stack.peek()), RESULT);
            }
          return CUP$ReportParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ReportParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ReportParser$do_action(
    int                        CUP$ReportParser$act_num,
    java_cup.runtime.lr_parser CUP$ReportParser$parser,
    java.util.Stack            CUP$ReportParser$stack,
    int                        CUP$ReportParser$top)
    throws java.lang.Exception
    {
              return CUP$ReportParser$do_action_part00000000(
                               CUP$ReportParser$act_num,
                               CUP$ReportParser$parser,
                               CUP$ReportParser$stack,
                               CUP$ReportParser$top);
    }
}

}
