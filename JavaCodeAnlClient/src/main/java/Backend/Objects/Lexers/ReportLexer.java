/* The following code was generated by JFlex 1.7.0 */

/**************************************************/
/************** SECTION 1: USER CODE **************/
/**************************************************/

package Backend.Objects.Lexers;
import java_cup.runtime.*;
import Backend.Objects.Parsers.repSym;

/**************************************************/
/*************** SECTION 2: CONFIGS ***************/
/**************************************************/

public class ReportLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    55, 55, 55, 55, 55, 55, 55, 55, 55,  4,  2,  4,  4,  2, 55, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
     4, 55,  1, 55, 15, 55, 55, 55, 19, 20, 18, 16, 55, 17,  9,  6, 
     8, 52, 53,  8,  8,  8,  8,  8,  8,  8, 13, 12,  5, 14,  7, 55, 
    55,  3,  3, 34,  3, 39, 44,  3,  3, 47,  3,  3, 41, 42, 31,  3, 
    50,  3, 38, 25, 21, 40, 49,  3,  3,  3,  3, 10, 55, 11, 55,  3, 
    55, 36, 33, 26, 43, 28, 54, 48, 51, 22,  3,  3, 35, 32, 46, 24, 
    23,  3, 27, 37, 30, 45,  3,  3, 29,  3,  3, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55,  4, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
     4, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
    55,  3, 55, 55, 55, 55, 55, 55, 55,  3, 55, 55, 55,  3, 55, 55, 
    55,  3, 55,  3, 55, 55, 55, 55, 55, 55,  3, 55, 55, 55, 55, 55, 
    55,  3, 55, 55, 55, 55, 55, 55, 55,  3, 55, 55, 55,  3, 55, 55, 
    55,  3, 55,  3, 55, 55, 55, 55, 55, 55,  3, 55, 55, 55, 55, 55
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\14\3\1\1\1\0\1\22"+
    "\5\0\1\23\17\3\16\0\17\3\1\24\10\0\1\25"+
    "\1\0\1\26\1\27\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\16\3\1\35\1\0\1\36\1\37\1\0\1\40"+
    "\1\41\3\0\1\42\1\3\1\43\12\3\1\44\2\0"+
    "\1\45\1\0\1\46\1\3\1\47\1\50\1\3\1\51"+
    "\1\52\5\3\1\0\1\53\1\54\2\3\1\55\1\56"+
    "\1\57\2\3\1\60\1\61\4\3\1\62\2\3\1\63"+
    "\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0118\0\u0150"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0188\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u01c0\0\u01f8\0\u0230\0\u0268"+
    "\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428"+
    "\0\u0118\0\70\0\u0118\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540"+
    "\0\u0118\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0118\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u0118\0\u10d8"+
    "\0\u0118\0\u0118\0\u0118\0\u1110\0\u0118\0\u0118\0\u0118\0\250"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u08c0\0\u1458"+
    "\0\u08c0\0\u08c0\0\u1490\0\u08c0\0\u08c0\0\u14c8\0\u1500\0\u1538"+
    "\0\250\0\u1570\0\250\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\250\0\u17d8\0\u1810"+
    "\0\u08c0\0\u1848\0\u0118\0\u1880\0\250\0\250\0\u18b8\0\250"+
    "\0\250\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u08c0"+
    "\0\u0118\0\u1a40\0\u1a78\0\250\0\250\0\250\0\u1ab0\0\u1ae8"+
    "\0\u08c0\0\250\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\250\0\u1c00"+
    "\0\u1c38\0\250\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\4"+
    "\1\27\5\4\1\30\2\4\1\31\3\4\1\32\3\4"+
    "\1\33\1\4\1\34\2\4\1\35\1\4\1\36\1\37"+
    "\1\40\2\10\1\4\1\41\1\42\1\43\1\0\65\42"+
    "\2\0\1\3\1\0\1\3\66\0\1\4\4\0\1\4"+
    "\14\0\42\4\7\0\1\44\27\0\1\45\2\0\1\46"+
    "\21\0\1\47\2\0\1\50\74\0\1\4\4\0\1\10"+
    "\14\0\37\4\2\10\1\4\20\0\1\51\53\0\1\4"+
    "\4\0\1\4\14\0\1\4\1\52\5\4\1\53\32\4"+
    "\4\0\1\4\4\0\1\4\14\0\11\4\1\54\30\4"+
    "\4\0\1\4\4\0\1\4\14\0\5\4\1\55\3\4"+
    "\1\56\30\4\4\0\1\4\4\0\1\4\14\0\3\4"+
    "\1\57\36\4\4\0\1\4\4\0\1\4\14\0\3\4"+
    "\1\60\12\4\1\61\23\4\4\0\1\4\4\0\1\4"+
    "\14\0\22\4\1\62\17\4\4\0\1\4\4\0\1\4"+
    "\14\0\7\4\1\63\32\4\4\0\1\4\4\0\1\4"+
    "\14\0\30\4\1\64\11\4\4\0\1\4\4\0\1\4"+
    "\14\0\31\4\1\65\10\4\4\0\1\4\4\0\1\4"+
    "\14\0\17\4\1\66\22\4\4\0\1\4\4\0\1\4"+
    "\14\0\17\4\1\67\22\4\4\0\1\4\4\0\1\4"+
    "\14\0\17\4\1\70\22\4\1\0\5\71\1\0\1\72"+
    "\27\71\1\73\24\71\1\74\2\71\1\75\1\71\33\0"+
    "\1\76\10\0\1\77\6\0\1\100\7\0\1\101\37\0"+
    "\1\102\72\0\1\103\25\0\1\104\1\105\32\0\1\106"+
    "\42\0\1\4\4\0\1\4\14\0\2\4\1\107\37\4"+
    "\4\0\1\4\4\0\1\4\14\0\10\4\1\110\31\4"+
    "\4\0\1\4\4\0\1\4\14\0\7\4\1\111\32\4"+
    "\4\0\1\4\4\0\1\4\14\0\3\4\1\112\36\4"+
    "\4\0\1\4\4\0\1\4\14\0\6\4\1\113\33\4"+
    "\4\0\1\4\4\0\1\4\14\0\13\4\1\114\26\4"+
    "\4\0\1\4\4\0\1\4\14\0\13\4\1\115\26\4"+
    "\4\0\1\4\4\0\1\4\14\0\17\4\1\116\22\4"+
    "\4\0\1\4\4\0\1\4\14\0\4\4\1\117\35\4"+
    "\4\0\1\4\4\0\1\4\14\0\11\4\1\120\30\4"+
    "\4\0\1\4\4\0\1\4\14\0\31\4\1\121\10\4"+
    "\4\0\1\4\4\0\1\4\14\0\11\4\1\122\30\4"+
    "\4\0\1\4\4\0\1\4\14\0\6\4\1\123\33\4"+
    "\4\0\1\4\4\0\1\4\14\0\6\4\1\124\33\4"+
    "\4\0\1\4\4\0\1\4\14\0\20\4\1\125\21\4"+
    "\1\0\5\71\1\0\1\72\70\71\1\126\65\71\1\0"+
    "\1\72\24\71\1\127\10\71\1\130\6\71\1\131\7\71"+
    "\1\132\11\71\1\0\1\72\27\71\1\133\25\71\1\134"+
    "\1\135\7\71\1\0\1\72\21\71\1\136\37\71\7\0"+
    "\1\137\121\0\1\140\35\0\1\141\67\0\1\142\67\0"+
    "\1\143\120\0\1\144\36\0\1\145\67\0\1\146\113\0"+
    "\1\147\37\0\1\4\4\0\1\4\14\0\3\4\1\150"+
    "\36\4\4\0\1\4\4\0\1\4\14\0\11\4\1\151"+
    "\30\4\4\0\1\4\4\0\1\4\14\0\6\4\1\152"+
    "\33\4\4\0\1\4\4\0\1\4\14\0\6\4\1\153"+
    "\33\4\4\0\1\4\4\0\1\4\14\0\1\4\1\154"+
    "\40\4\4\0\1\4\4\0\1\4\14\0\14\4\1\155"+
    "\25\4\4\0\1\4\4\0\1\4\14\0\7\4\1\156"+
    "\32\4\4\0\1\4\4\0\1\4\14\0\20\4\1\157"+
    "\21\4\4\0\1\4\4\0\1\4\14\0\23\4\1\160"+
    "\16\4\4\0\1\4\4\0\1\4\14\0\3\4\1\161"+
    "\36\4\4\0\1\4\4\0\1\4\14\0\5\4\1\162"+
    "\34\4\4\0\1\4\4\0\1\4\14\0\7\4\1\163"+
    "\32\4\4\0\1\4\4\0\1\4\14\0\1\4\1\164"+
    "\40\4\4\0\1\4\4\0\1\4\14\0\17\4\1\165"+
    "\22\4\4\0\1\4\4\0\1\4\14\0\11\4\1\166"+
    "\30\4\1\0\5\71\1\0\1\72\1\167\65\71\1\0"+
    "\1\72\32\71\1\170\33\71\1\0\1\72\1\171\65\71"+
    "\1\0\1\72\1\172\65\71\1\0\1\72\31\71\1\173"+
    "\34\71\1\0\1\72\1\174\65\71\1\0\1\72\1\175"+
    "\65\71\1\0\1\72\24\71\1\176\34\71\43\0\1\177"+
    "\67\0\1\200\27\0\1\4\4\0\1\4\14\0\3\4"+
    "\1\201\36\4\4\0\1\4\4\0\1\4\14\0\17\4"+
    "\1\202\22\4\4\0\1\4\4\0\1\4\14\0\7\4"+
    "\1\203\32\4\4\0\1\4\4\0\1\4\14\0\31\4"+
    "\1\204\10\4\4\0\1\4\4\0\1\4\14\0\6\4"+
    "\1\205\33\4\4\0\1\4\4\0\1\4\14\0\31\4"+
    "\1\206\10\4\4\0\1\4\4\0\1\4\14\0\7\4"+
    "\1\207\32\4\4\0\1\4\4\0\1\4\14\0\24\4"+
    "\1\210\15\4\4\0\1\4\4\0\1\4\14\0\26\4"+
    "\1\211\13\4\4\0\1\4\4\0\1\4\14\0\1\4"+
    "\1\212\40\4\4\0\1\4\4\0\1\4\14\0\33\4"+
    "\1\213\6\4\4\0\1\4\4\0\1\4\14\0\17\4"+
    "\1\214\22\4\4\0\1\4\4\0\1\4\14\0\13\4"+
    "\1\215\26\4\4\0\1\4\4\0\1\4\14\0\17\4"+
    "\1\216\22\4\1\0\5\71\1\0\1\72\34\71\1\217"+
    "\31\71\1\0\1\72\34\71\1\220\31\71\1\0\1\72"+
    "\1\221\60\71\34\0\1\222\42\0\1\223\63\0\1\4"+
    "\4\0\1\4\14\0\26\4\1\224\13\4\4\0\1\4"+
    "\4\0\1\4\14\0\33\4\1\225\6\4\4\0\1\4"+
    "\4\0\1\4\14\0\7\4\1\226\32\4\4\0\1\4"+
    "\4\0\1\4\14\0\11\4\1\227\30\4\4\0\1\4"+
    "\4\0\1\4\14\0\20\4\1\230\21\4\4\0\1\4"+
    "\4\0\1\4\14\0\1\231\41\4\4\0\1\4\4\0"+
    "\1\4\14\0\3\4\1\232\36\4\4\0\1\4\4\0"+
    "\1\4\14\0\3\4\1\233\36\4\4\0\1\4\4\0"+
    "\1\4\14\0\7\4\1\234\32\4\4\0\1\4\4\0"+
    "\1\4\14\0\14\4\1\235\25\4\4\0\1\4\4\0"+
    "\1\4\14\0\7\4\1\236\32\4\1\0\5\71\1\0"+
    "\1\72\25\71\1\237\40\71\1\0\1\72\1\240\60\71"+
    "\7\0\1\241\63\0\1\4\4\0\1\4\14\0\3\4"+
    "\1\242\36\4\4\0\1\4\4\0\1\4\14\0\17\4"+
    "\1\243\22\4\4\0\1\4\4\0\1\4\14\0\20\4"+
    "\1\244\21\4\4\0\1\4\4\0\1\4\14\0\31\4"+
    "\1\245\10\4\4\0\1\4\4\0\1\4\14\0\6\4"+
    "\1\246\33\4\4\0\1\4\4\0\1\4\14\0\16\4"+
    "\1\247\23\4\4\0\1\4\4\0\1\4\14\0\11\4"+
    "\1\250\30\4\1\0\5\71\1\0\1\72\1\251\60\71"+
    "\3\0\1\4\4\0\1\4\14\0\6\4\1\252\33\4"+
    "\4\0\1\4\4\0\1\4\14\0\6\4\1\253\33\4"+
    "\4\0\1\4\4\0\1\4\14\0\7\4\1\254\32\4"+
    "\4\0\1\4\4\0\1\4\14\0\6\4\1\255\33\4"+
    "\4\0\1\4\4\0\1\4\14\0\1\4\1\256\40\4"+
    "\4\0\1\4\4\0\1\4\14\0\20\4\1\257\21\4"+
    "\4\0\1\4\4\0\1\4\14\0\3\4\1\260\36\4"+
    "\4\0\1\4\4\0\1\4\14\0\3\4\1\261\36\4"+
    "\4\0\1\4\4\0\1\4\14\0\20\4\1\262\21\4"+
    "\4\0\1\4\4\0\1\4\14\0\20\4\1\263\21\4"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\1\2\11\1\1\6\11\1\1\5\11\14\1"+
    "\1\11\1\0\1\11\5\0\1\11\17\1\16\0\17\1"+
    "\1\11\10\0\1\11\1\0\3\11\1\0\3\11\20\1"+
    "\1\0\2\1\1\0\2\1\3\0\16\1\2\0\1\1"+
    "\1\0\1\11\13\1\1\0\1\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReportLexer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(repSym.EOF, -1, -1);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(repSym.UNKNOWN, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 53: break;
          case 2: 
            { /*IGNORE*/
            } 
            // fall through
          case 54: break;
          case 3: 
            { return new Symbol(repSym.ID, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 55: break;
          case 4: 
            { return new Symbol(repSym.DIV, yyline+1, yycolumn+1);
            } 
            // fall through
          case 56: break;
          case 5: 
            { return new Symbol(repSym.GT, yyline+1, yycolumn+1);
            } 
            // fall through
          case 57: break;
          case 6: 
            { return new Symbol(repSym.NUMBER, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 58: break;
          case 7: 
            { return new Symbol(repSym.DOT, yyline+1, yycolumn+1);
            } 
            // fall through
          case 59: break;
          case 8: 
            { return new Symbol(repSym.BRACK_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 60: break;
          case 9: 
            { return new Symbol(repSym.BRACK_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 61: break;
          case 10: 
            { return new Symbol(repSym.SEMICOLON, yyline+1, yycolumn+1);
            } 
            // fall through
          case 62: break;
          case 11: 
            { return new Symbol(repSym.COLON, yyline+1, yycolumn+1);
            } 
            // fall through
          case 63: break;
          case 12: 
            { return new Symbol(repSym.EQUALS, yyline+1, yycolumn+1);
            } 
            // fall through
          case 64: break;
          case 13: 
            { return new Symbol(repSym.PLUS, yyline+1, yycolumn+1);
            } 
            // fall through
          case 65: break;
          case 14: 
            { return new Symbol(repSym.LESS, yyline+1, yycolumn+1);
            } 
            // fall through
          case 66: break;
          case 15: 
            { return new Symbol(repSym.MULT, yyline+1, yycolumn+1);
            } 
            // fall through
          case 67: break;
          case 16: 
            { return new Symbol(repSym.PAR_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 68: break;
          case 17: 
            { return new Symbol(repSym.PAR_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 69: break;
          case 18: 
            { return new Symbol(repSym.STRING, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 70: break;
          case 19: 
            { return new Symbol(repSym.DOLAR, yyline+1, yycolumn+1);
            } 
            // fall through
          case 71: break;
          case 20: 
            { /*IGNORE*/ System.out.println("Coment: \n\n" + yytext());
            } 
            // fall through
          case 72: break;
          case 21: 
            { return new Symbol(repSym.TR_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 73: break;
          case 22: 
            { return new Symbol(repSym.TD_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 74: break;
          case 23: 
            { return new Symbol(repSym.TH_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 75: break;
          case 24: 
            { return new Symbol(repSym.BR, yyline+1, yycolumn+1);
            } 
            // fall through
          case 76: break;
          case 25: 
            { return new Symbol(repSym.H1_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 77: break;
          case 26: 
            { return new Symbol(repSym.H2_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 78: break;
          case 27: 
            { return new Symbol(repSym.FOR_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 79: break;
          case 28: 
            { return new Symbol(repSym.TYPE, yyline+1, yycolumn+1);
            } 
            // fall through
          case 80: break;
          case 29: 
            { return new Symbol(repSym.TR_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 81: break;
          case 30: 
            { return new Symbol(repSym.TD_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 82: break;
          case 31: 
            { return new Symbol(repSym.TH_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 83: break;
          case 32: 
            { return new Symbol(repSym.H1_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 84: break;
          case 33: 
            { return new Symbol(repSym.H2_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 85: break;
          case 34: 
            { return new Symbol(repSym.TEXT, yyline+1, yycolumn+1);
            } 
            // fall through
          case 86: break;
          case 35: 
            { return new Symbol(repSym.SCORE, yyline+1, yycolumn+1);
            } 
            // fall through
          case 87: break;
          case 36: 
            { return new Symbol(repSym.UNTIL, yyline+1, yycolumn+1);
            } 
            // fall through
          case 88: break;
          case 37: 
            { return new Symbol(repSym.FOR_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 89: break;
          case 38: 
            { return new Symbol(repSym.HTML_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 90: break;
          case 39: 
            { return new Symbol(repSym.STRING_TYPE, yyline+1, yycolumn+1);
            } 
            // fall through
          case 91: break;
          case 40: 
            { return new Symbol(repSym.NAME, yyline+1, yycolumn+1);
            } 
            // fall through
          case 92: break;
          case 41: 
            { return new Symbol(repSym.CLASSES, yyline+1, yycolumn+1);
            } 
            // fall through
          case 93: break;
          case 42: 
            { return new Symbol(repSym.RESULT, yyline+1, yycolumn+1);
            } 
            // fall through
          case 94: break;
          case 43: 
            { return new Symbol(repSym.HTML_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 95: break;
          case 44: 
            { return new Symbol(repSym.TABLE_O, yyline+1, yycolumn+1);
            } 
            // fall through
          case 96: break;
          case 45: 
            { return new Symbol(repSym.METHODS, yyline+1, yycolumn+1);
            } 
            // fall through
          case 97: break;
          case 46: 
            { return new Symbol(repSym.FUNCTION, yyline+1, yycolumn+1);
            } 
            // fall through
          case 98: break;
          case 47: 
            { return new Symbol(repSym.INTEGER, yyline+1, yycolumn+1);
            } 
            // fall through
          case 99: break;
          case 48: 
            { return new Symbol(repSym.TABLE_C, yyline+1, yycolumn+1);
            } 
            // fall through
          case 100: break;
          case 49: 
            { return new Symbol(repSym.ITERATOR, yyline+1, yycolumn+1);
            } 
            // fall through
          case 101: break;
          case 50: 
            { return new Symbol(repSym.VARIABLES, yyline+1, yycolumn+1);
            } 
            // fall through
          case 102: break;
          case 51: 
            { return new Symbol(repSym.PARAMETERS, yyline+1, yycolumn+1);
            } 
            // fall through
          case 103: break;
          case 52: 
            { return new Symbol(repSym.COMMENTS, yyline+1, yycolumn+1);
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
