/**************************************************/
/************** SECTION 1: USER CODE **************/
/**************************************************/

package Backend.Objects.Parsers;

import Backend.Objects.Lexers.JSONLexer;
import Backend.Objects.Parsers.JSONData.JSONActioner;
import java_cup.runtime.*;
import java.util.ArrayList;

/**************************************************/
/************ SECTION 2: USER METHODS *************/
/**************************************************/

parser code {:

    public JSONActioner jsonActioner;

    // constructor
    public JSONParser(JSONLexer lexer) {
        super(lexer);
        this.jsonActioner = new JSONActioner();
    }

    // error methods
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        try {
            // save error to be shown
            jsonActioner.addToHash("error");
            ArrayList<String> expectedTkns = new ArrayList<>();
            expected_token_ids().forEach(symT -> {
                expectedTkns.add(sym.terminalNames[symT]);
            });
            String value = cur_token.value  != null? cur_token.value.toString(): "NA";
            jsonActioner.addError(cur_token.left, cur_token.right, value, expectedTkns);
        } catch (Exception e) {
            System.out.println("unable to save error at json parser " + e.getMessage());
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("unrecovered sintax error");
    }   

    public JSONActioner getActioner() {
        return this.jsonActioner;
    }
:}

/**************************************************/
/********** SECTION 3: SINTACTICAL RULES **********/
/**************************************************/

// terminal from lexer
terminal BRACE_O, BRACE_C, BRACKET_O, BRACKET_C, COMMA, COLON, TYPE, TEXT, SCORE, CLASSES, 
    METHODS, FUNCTION, NAME, VARIABLES, PARAMETER, NUMBER, COMMENTS, UNKNOWN;
terminal String STRING;

non terminal main, json_content, score_section, classes_section, variables_section, comments_section,
    methods_section, classes_content, empty_section, classes_declarations, class_declaration, variables_declarations,
    variable_declaration, variables_content, methods_declarations, method_declaration, method_content, comment_declaration,
comments_declarations, comments_content, json_content_available;

start with main;

main::= 
    BRACE_O json_content BRACE_C
;

json_content::=
      json_content_available
    | json_content COMMA json_content_available
;

json_content_available::=
      score_section         {: jsonActioner.addToHash("score"); :}
    | classes_section       {: jsonActioner.addToHash("classes"); :}
    | variables_section     {: jsonActioner.addToHash("variables"); :}
    | methods_section       {: jsonActioner.addToHash("methods"); :}
    | comments_section      {: jsonActioner.addToHash("comments"); :}
    | error
;

score_section::=
    SCORE COLON STRING:score          {: jsonActioner.saveScore(score); :}
;

classes_section::=
    CLASSES COLON classes_content
;

variables_section::=
    VARIABLES COLON variables_content
;

methods_section::=
    METHODS COLON method_content
;

comments_section::=
    COMMENTS COLON comments_content
;

// content
classes_content::=
      empty_section
    | BRACKET_O  classes_declarations BRACKET_C
;

variables_content::=
      empty_section
    | BRACKET_O variables_declarations BRACKET_C
;

method_content::=
      empty_section
    | BRACKET_O methods_declarations BRACKET_C
;

comments_content::=
      empty_section
    | BRACKET_O comments_declarations BRACKET_C
;

empty_section::=
    BRACKET_O BRACKET_C
;

// classes
classes_declarations::=
      class_declaration
    | class_declaration COMMA class_declaration
;

class_declaration::=
      BRACE_O NAME COLON STRING:classN  BRACE_C          {: jsonActioner.saveClass(classN); :}
    | error BRACE_C
;

// variables
variables_declarations::=
      variable_declaration
    | variables_declarations COMMA variable_declaration
;

variable_declaration::=
      BRACE_O NAME COLON STRING:name COMMA TYPE COLON STRING:type COMMA FUNCTION COLON STRING:function BRACE_C      {: jsonActioner.saveVariable(name,type,function); :}
    | error BRACE_C
;

// methods
methods_declarations::=
      method_declaration
    | methods_declarations COMMA method_declaration
;

method_declaration::=
      BRACE_O NAME COLON STRING:name COMMA TYPE COLON STRING:type COMMA PARAMETER COLON NUMBER:parameters BRACE_C   {: jsonActioner.saveMethod(name,type,parameters.toString()); :}
    | error BRACE_C
;

// comments
comments_declarations::=
      comment_declaration
    | comments_declarations COMMA comment_declaration
;

comment_declaration::=
      BRACE_O TEXT COLON STRING:comment BRACE_C         {: jsonActioner.saveComment(comment); :}
    | error BRACE_C
;