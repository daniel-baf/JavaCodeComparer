/**************************************************/
/************** SECTION 1: USER CODE **************/
/**************************************************/

package Backend.Objects.Parsers;

import Backend.Objects.HTML.Extra.*;
import Backend.Objects.HTML.Table.*;
import Backend.Objects.SymTable.Variables.*;
import Backend.Objects.Lexers.ReportLexer;
import Backend.Objects.Parsers.JSONData.JSONDataSaver;
import Backend.Objects.Parsers.DefData.ReportActioner;
import java.util.ArrayList;

import java_cup.runtime.*;

/**************************************************/
/************ SECTION 2: USER METHODS *************/
/**************************************************/

parser code {:

    private ReportActioner actioner;

    public ReportParser(ReportLexer lexer, JSONDataSaver JSONData) {
        super(lexer);
        this.actioner = new ReportActioner(JSONData);

    }

    // error methods
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
      try {
        // save error to be shown
        ArrayList<String> expectedTkns = new ArrayList<>();
        expected_token_ids().forEach(symT -> {
            expectedTkns.add(repSym.terminalNames[symT]);
        });
        String value = cur_token.value  != null? cur_token.value.toString(): "NA";
        this.actioner.addError(cur_token.left, cur_token.right, value, expectedTkns, "SINTACTICO");
      } catch (Exception e) {
        System.out.println("unable to save error at json parser " + e.getMessage());
      }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("unrecovered sintax error");
    }

    public ReportActioner getActioner() { return this.actioner; } 

    public String getValueFrom(Object obj) {
      try {
        return ((VarElement) obj).getValue().toString();
      }catch (Exception e) {
        this.actioner.addError(cur_token.left, cur_token.right, obj +  ": Variable no declarada", null, "SEMANTICO");
        return "ERROR, no existe datos"; // TODO save error
      }
    }

    public VarElement createFor(Object iter) {
        try {
            iter = new VarElement(0, VarType.INTEGER, ((VarElement) iter).getValue().toString());
            actioner.saveOnTable(iter , ((VarElement) iter).getId(), VarType.INTEGER, cur_token.left, cur_token.right); 
            return (VarElement) iter;
        } catch(Exception e) {
            System.out.println("Error creating for declaration: " + e.getMessage());
            return null;
        }
    }
:}

/**************************************************/
/************ SECTION 3: LEXICAL RULES ************/
/**************************************************/

// from lexer


terminal INTEGER, STRING_TYPE;

terminal HTML_C, HTML_O, H1_C, H1_O, H2_C, H2_O, TABLE_C, TABLE_O, FOR_C, FOR_O, TR_C, TR_O, TD_C, TD_O, TH_C, TH_O,
  BR, UNKNOWN, ID, DIV, NUMBER, DOT, BRACK_C, BRACK_O, SEMICOLON, COLON, EQUALS, PLUS, LESS, MULT, PAR_C, PAR_O,  
  DOLAR, TYPE, SCORE, UNTIL, NAME, CLASSES, RESULT_T, METHODS, FUNCTION, ITERATOR, VARIABLES, PARAMETERS,
  COMMENTS, TEXT, GT, STRING;

non terminal main, var_declaration, typeOf, variables_section, arithm_expr, master_element, sym_arithm, element, id_vals, result_object, result_object_attrs,
    result_data_classes, result_data_variables, result_data_methods, result_data_comments, result_data_variables_children, result_data_methods_children, html_section,
    html_content, html_declarations, html_declarations_global, table_declaration, for_declaration, h1_declaration, h2_declaration, br_declaration, data_set,
    table_content, table_row_declaration, table_row_sub, table_row_content, table_row_headers, table_row_bodies, table_row_headers_content, table_row_bodies_content,
    for_open, brack_and_num, table_row_content_sub;

// precedence
precedence left PLUS, LESS;
precedence left DIV, MULT;
precedence left PAR_O, PAR_C;


start with main;

main::=
      variables_section html_section
    | html_section
    | variables_section
;

// HTML
html_section::=
      HTML_O HTML_C                       {: actioner.saveHTML(null); :}
    | HTML_O html_content:data HTML_C     {: actioner.saveHTML(data); :}
;

html_content::=
      html_declarations:data                          {: RESULT=actioner.mergeHTMLArrays(null, data); :}
    | html_content:nextData html_declarations:data    {: RESULT=actioner.mergeHTMLArrays(nextData, data); :}
;

html_declarations::=
      html_declarations_global:data    {: RESULT=actioner.getHTMLContentAsArray(data); :}
    | table_declaration:data           {: RESULT=actioner.getHTMLContentAsArray(data); :}
    | for_declaration:data             {: RESULT=data; :}
    | error
;

html_declarations_global::=
      h1_declaration:data         {: RESULT=data; :}
    | h2_declaration:data         {: RESULT=data; :}
    | br_declaration:data         {: RESULT=data; :}
;

h1_declaration::=
      H1_O H1_C                   {: RESULT=new H1(""); :}
    | H1_O data_set:data H1_C     {: RESULT=new H1(actioner.findDataForId(data, cur_token.left, cur_token.right)); :}
;

h2_declaration::=
      H2_O H2_C                   {: RESULT=new H2(""); :}
    | H2_O data_set:data H2_C     {: RESULT=new H2(actioner.findDataForId(data, cur_token.left, cur_token.right)); :}
;

br_declaration::=
  BR    {: RESULT=new Br(); :}
;

table_declaration::=
      TABLE_O TABLE_C                        {: RESULT=new Table(); :}
    | TABLE_O table_content:data TABLE_C     {: RESULT=actioner.saveTable(data); :}
;

table_content::=
      table_row_declaration:data                                     {: RESULT=actioner.getTrsAsArray(null, data); :}
    | table_content:nextData table_row_declaration:data              {: RESULT=actioner.getTrsAsArray(nextData, data); :}
;

table_row_declaration::=
        table_row_sub:data      
            {:
                ArrayList<Tr> tmp = new ArrayList<>();
                tmp.add((Tr) data);
                RESULT=tmp; 
            :}
      | for_open:forInc table_row_sub:data FOR_C        {: RESULT=actioner.createMultipleTr ((Tr)data, 0, forInc, cur_token.left, cur_token.right); :}
;

table_row_sub::=
      TR_O TR_C                                         {: RESULT=actioner.createTr(null); :}
    | TR_O table_row_content:data TR_C                  {: RESULT=actioner.createTr(data); :}
;

table_row_content::=
      table_row_content_sub:data                           {: RESULT=data; :}
    | for_open:forInc table_row_content_sub:data FOR_C     {: RESULT=actioner.createMultipleTdTh(data, 0, forInc, cur_token.left, cur_token.right); :}
;

table_row_content_sub::=
      table_row_headers:data              {: RESULT=data; :}
    | table_row_bodies:data               {: RESULT=data; :}
;

table_row_headers::=
      table_row_headers_content:data                                {: RESULT=actioner.getVarElementsAsArray(null, data); :}
    | table_row_headers:nextData table_row_headers_content:data     {: RESULT=actioner.getVarElementsAsArray(nextData, data); :}
;

table_row_headers_content::=
      TH_O TH_C                 {: RESULT=new Th(""); :}
    | TH_O data_set:data TH_C   {: RESULT=new Th(data); :}
;

table_row_bodies::=
      table_row_bodies_content:data                              {: RESULT=actioner.getVarElementsAsArray(null, data); :}
    | table_row_bodies:nextData table_row_bodies_content:data    {: RESULT=actioner.getVarElementsAsArray(nextData, data); :}
;

table_row_bodies_content::=
      TD_O TD_C                 {: RESULT=new Td(""); :}
    | TD_O data_set:data TD_C   {: RESULT=new Td(data); :}
;


for_declaration::=
      for_open FOR_C                             {: RESULT=null; :}
    | for_open:forData html_content:data FOR_C   {: RESULT=actioner.multipliHTMLContentForTimes(data,forData,cur_token.left, cur_token.right ); :}
;

for_open::=
    FOR_O ITERATOR COLON id_vals:iter UNTIL COLON element:until SEMICOLON GT   {: actioner.findDataForId(until, cur_token.left, cur_token.right); RESULT=new VarElement[]{createFor(iter), (VarElement) until}; :}
;


// VARIABLES

variables_section::=
      var_declaration
    | variables_section var_declaration
;


var_declaration::=
      typeOf:type ID:id SEMICOLON                              {: actioner.saveOnTable(null, id.toString(), (VarType) type, cur_token.left, cur_token.right); :}
    | typeOf:type ID:id EQUALS arithm_expr:value SEMICOLON     {: actioner.saveOnTable(value, id.toString(), (VarType) type, cur_token.left, cur_token.right); :}
    | error SEMICOLON
;

// VARIABLES DATA
arithm_expr::=
    master_element:elem                                       {: RESULT=elem; :}
  | arithm_expr:elemL sym_arithm:action arithm_expr:elemR     {: RESULT=actioner.castElements(elemL, elemR, (VarAction) action, cur_token.left, cur_token.right); :}
  | PAR_O arithm_expr:elem PAR_C                              {: RESULT=elem; :}
;

data_set::=
      DOLAR PAR_O id_vals:data PAR_C DOLAR        {: RESULT=data; :}
    | element:data                                {: RESULT=getValueFrom(data); :}
    | html_declarations_global:data               {: RESULT=data; :}
;

// TERMINAL GENERATORS
master_element::=
      element:elem            {: RESULT=elem; :}
    | STRING:str              {: RESULT=new VarElement(str.toString(), VarType.STRING); :}
;

element::=
      NUMBER:num              {: RESULT=new VarElement(Integer.valueOf(num.toString()), VarType.INTEGER); :}
    | id_vals:id              {: RESULT=id; :}
    | error
;

id_vals::=
      ID:id                   {: RESULT=new VarElement(id.toString(), VarType.ID); :}
    | result_object:result    {: RESULT=result; :}
;

result_object::=
      RESULT_T                                  {: RESULT=actioner.getFromResult(1,null); :}
    | RESULT_T DOT result_object_attrs:data     {: RESULT=data; :}
;

result_object_attrs::=
      SCORE                         {: RESULT=actioner.getFromResult(2,null); :}
    | result_data_classes:data      {: RESULT=data; :}
    | result_data_variables:data    {: RESULT=data; :}
    | result_data_methods:data      {: RESULT=data; :}
    | result_data_comments:data     {: RESULT=data; :}
;

result_data_classes::=
      CLASSES                             {: RESULT=actioner.getFromResult(3,null); :}
    | CLASSES brack_and_num:id            {: RESULT=actioner.getFromResult(4,id.toString()); :}
    | CLASSES brack_and_num:id DOT NAME   {: RESULT=actioner.getFromResult(5,id.toString()); :}
;

result_data_variables::=
      VARIABLES                                                           {: RESULT=actioner.getFromResult(6,null); :}
    | VARIABLES brack_and_num:id                                          {: RESULT=actioner.getFromResult(7,id.toString()); :}                             
    | VARIABLES brack_and_num:id DOT result_data_variables_children:type  {: RESULT=actioner.getFromVariableResult(id.toString(),type.toString()); :} 
;

result_data_methods::=
      METHODS                                                            {: RESULT=actioner.getFromResult(11,null); :}
    | METHODS brack_and_num:id                                           {: RESULT=actioner.getFromResult(12,id.toString()); :}    
    | METHODS brack_and_num:id DOT result_data_methods_children:type     {: RESULT=actioner.getFromMethodResult(id.toString(), type.toString()); :}
;

result_data_comments::=
      COMMENTS                                  {: RESULT=actioner.getFromResult(8,null); :}
    | COMMENTS brack_and_num:id                 {: RESULT=actioner.getFromResult(9,id.toString()); :}
    | COMMENTS brack_and_num:id DOT TEXT        {: RESULT=actioner.getFromResult(10,id.toString()); :}
;

result_data_variables_children::=
      NAME          {: RESULT="name"; :}
    | TYPE          {: RESULT="type"; :}
    | FUNCTION      {: RESULT="function"; :}
;

result_data_methods_children::=
      NAME          {: RESULT="name"; :}
    | TYPE          {: RESULT="type"; :}
    | PARAMETERS    {: RESULT="parameters"; :}
;

brack_and_num::=
      BRACK_O NUMBER:num BRACK_C    {: RESULT=num; :}
    | BRACK_O ID:id BRACK_C         {: RESULT=id; :}
;

sym_arithm::=
      PLUS    {: RESULT=VarAction.ADD; :}
    | LESS    {: RESULT=VarAction.SUB; :}
    | MULT    {: RESULT=VarAction.MULT; :}
    | DIV     {: RESULT=VarAction.DIV; :}
;

typeOf::=
      INTEGER         {: RESULT=VarType.INTEGER; :}
    | STRING_TYPE     {: RESULT=VarType.STRING; :}
;