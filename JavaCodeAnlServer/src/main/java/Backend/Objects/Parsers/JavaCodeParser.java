
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Backend.Objects.Parsers;

import java_cup.runtime.*;
import Backend.Objects.Lexers.JavaCodeLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaCodeParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaCodeParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaCodeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaCodeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\061\004\000\002\061" +
    "\003\000\002\063\003\000\002\063\004\000\002\064\003" +
    "\000\002\064\003\000\002\064\004\000\002\062\005\000" +
    "\002\065\005\000\002\065\007\000\002\057\003\000\002" +
    "\057\004\000\002\060\006\000\002\060\007\000\002\055" +
    "\003\000\002\055\004\000\002\056\003\000\002\056\003" +
    "\000\002\045\003\000\002\045\004\000\002\053\003\000" +
    "\002\053\004\000\002\047\003\000\002\047\003\000\002" +
    "\046\004\000\002\046\004\000\002\043\005\000\002\043" +
    "\004\000\002\030\004\000\002\030\005\000\002\033\003" +
    "\000\002\033\004\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\004\000\002\050\004\000\002\054\005" +
    "\000\002\054\006\000\002\037\011\000\002\037\004\000" +
    "\002\040\003\000\002\040\004\000\002\041\005\000\002" +
    "\041\004\000\002\042\003\000\002\042\004\000\002\036" +
    "\007\000\002\036\011\000\002\034\007\000\002\035\011" +
    "\000\002\035\012\000\002\051\005\000\002\051\005\000" +
    "\002\031\007\000\002\031\011\000\002\044\005\000\002" +
    "\044\004\000\002\025\003\000\002\025\004\000\002\026" +
    "\003\000\002\026\004\000\002\026\004\000\002\026\005" +
    "\000\002\027\004\000\002\027\005\000\002\027\004\000" +
    "\002\023\005\000\002\024\004\000\002\024\004\000\002" +
    "\024\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\022\003\000\002\017\003" +
    "\000\002\017\005\000\002\020\003\000\002\020\005\000" +
    "\002\020\006\000\002\016\003\000\002\016\005\000\002" +
    "\012\003\000\002\012\005\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\006\000\002\015\007" +
    "\000\002\013\004\000\002\066\003\000\002\066\005\000" +
    "\002\066\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\010\003\000\002\010\005" +
    "\000\002\007\003\000\002\007\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\004\003\000\002\004\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\014\003\012\055\007\071\017\072\004\073" +
    "\015\001\002\000\004\042\076\001\002\000\004\002\351" +
    "\001\002\000\014\002\ufffe\003\ufffe\055\ufffe\071\ufffe\073" +
    "\ufffe\001\002\000\004\071\017\001\002\000\012\003\012" +
    "\055\007\071\017\073\015\001\002\000\014\002\ufff6\003" +
    "\ufff6\055\ufff6\071\ufff6\073\ufff6\001\002\000\012\003\012" +
    "\055\007\071\017\073\015\001\002\000\014\002\uffff\003" +
    "\012\055\007\071\017\073\015\001\002\000\014\002\ufffc" +
    "\003\ufffc\055\ufffc\071\ufffc\073\ufffc\001\002\000\004\042" +
    "\076\001\002\000\014\002\ufffb\003\ufffb\055\ufffb\071\ufffb" +
    "\073\ufffb\001\002\000\004\042\020\001\002\000\004\036" +
    "\021\001\002\000\022\003\036\037\023\042\030\043\042" +
    "\055\026\056\035\057\032\070\037\001\002\000\022\003" +
    "\ufff0\037\ufff0\042\ufff0\043\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\070\ufff0\001\002\000\014\002\ufff4\003\ufff4\055\ufff4\071" +
    "\ufff4\073\ufff4\001\002\000\022\003\uffee\037\uffee\042\uffee" +
    "\043\uffee\055\uffee\056\uffee\057\uffee\070\uffee\001\002\000" +
    "\022\003\036\037\336\042\030\043\042\055\026\056\035" +
    "\057\032\070\037\001\002\000\016\003\036\042\030\043" +
    "\042\056\035\057\032\070\037\001\002\000\022\003\uffea" +
    "\037\uffea\042\uffea\043\uffea\055\uffea\056\uffea\057\uffea\070" +
    "\uffea\001\002\000\010\003\uff92\031\311\042\uff92\001\002" +
    "\000\022\003\uffe9\037\uffe9\042\uffe9\043\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\070\uffe9\001\002\000\014\003\036\042\030" +
    "\043\042\056\332\070\037\001\002\000\022\003\ufff2\037" +
    "\ufff2\042\ufff2\043\ufff2\055\ufff2\056\ufff2\057\ufff2\070\ufff2" +
    "\001\002\000\022\003\uffef\037\uffef\042\uffef\043\uffef\055" +
    "\uffef\056\uffef\057\uffef\070\uffef\001\002\000\010\003\327" +
    "\042\312\043\042\001\002\000\006\034\222\036\136\001" +
    "\002\000\006\003\046\042\324\001\002\000\022\003\uffec" +
    "\037\uffec\042\uffec\043\uffec\055\uffec\056\uffec\057\uffec\070" +
    "\uffec\001\002\000\022\003\uffbe\037\uffbe\042\uffbe\043\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\070\uffbe\001\002\000\006\003" +
    "\uff93\042\uff93\001\002\000\006\003\046\042\045\001\002" +
    "\000\022\003\uffc0\037\uffc0\042\uffc0\043\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\070\uffc0\001\002\000\026\004\uff95\005\uff95" +
    "\006\uff95\007\uff95\010\uff95\011\uff95\022\uff95\031\311\034" +
    "\uff95\035\uff95\001\002\000\004\036\136\001\002\000\044" +
    "\003\uffba\037\uffba\042\uffba\043\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\066\uffba\067\uffba\070\uffba\001\002\000\024\004" +
    "\063\005\064\006\056\007\054\010\052\011\053\022\057" +
    "\034\061\035\060\001\002\000\022\003\uffe7\037\uffe7\042" +
    "\uffe7\043\uffe7\055\uffe7\056\uffe7\057\uffe7\070\uffe7\001\002" +
    "\000\022\031\uff82\042\uff82\044\uff82\045\uff82\046\uff82\047" +
    "\uff82\050\uff82\051\uff82\001\002\000\022\031\uff81\042\uff81" +
    "\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\001" +
    "\002\000\022\031\uff83\042\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\050\uff83\051\uff83\001\002\000\004\034\uffb4\001" +
    "\002\000\022\031\uff84\042\uff84\044\uff84\045\uff84\046\uff84" +
    "\047\uff84\050\uff84\051\uff84\001\002\000\004\042\135\001" +
    "\002\000\024\031\066\042\076\044\071\045\067\046\077" +
    "\047\100\050\072\051\075\052\113\001\002\000\044\003" +
    "\uffb9\037\uffb9\042\uffb9\043\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\001\002\000\004\034\112" +
    "\001\002\000\006\032\uff86\034\uff86\001\002\000\006\032" +
    "\uff85\034\uff85\001\002\000\022\031\066\042\076\044\071" +
    "\045\067\046\077\047\100\050\072\051\075\001\002\000" +
    "\022\031\066\042\076\044\071\045\067\046\077\047\100" +
    "\050\072\051\075\001\002\000\044\012\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\032\uff9b\034" +
    "\uff9b\040\uff9b\001\002\000\046\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\057\023" +
    "\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\032\uff96" +
    "\034\uff96\040\uff96\001\002\000\044\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\032\uff9c\034" +
    "\uff9c\040\uff9c\001\002\000\044\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\032\uff98\034\uff98" +
    "\040\uff98\001\002\000\042\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\032\uff9f\034\uff9f\001" +
    "\002\000\016\023\101\024\104\025\105\026\106\027\102" +
    "\034\uffb5\001\002\000\044\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\032\uff97\034\uff97\040" +
    "\uff97\001\002\000\066\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\034" +
    "\uff95\035\uff95\040\uff95\001\002\000\044\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\032\uff9a" +
    "\034\uff9a\040\uff9a\001\002\000\044\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\032\uff99\034" +
    "\uff99\040\uff99\001\002\000\022\031\uff8d\042\uff8d\044\uff8d" +
    "\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\001\002\000" +
    "\022\031\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\001\002\000\022\031\066\042\076\044" +
    "\071\045\067\046\077\047\100\050\072\051\075\001\002" +
    "\000\022\031\uff91\042\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\001\002\000\022\031\uff90\042\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\001" +
    "\002\000\022\031\uff8f\042\uff8f\044\uff8f\045\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\001\002\000\042\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\023\101\024\104\025\105\026\106\027\102\030\uff9e\032" +
    "\uff9e\034\uff9e\001\002\000\016\023\101\024\104\025\105" +
    "\026\106\027\102\032\111\001\002\000\042\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\032" +
    "\uff9d\034\uff9d\001\002\000\044\003\uffb7\037\uffb7\042\uffb7" +
    "\043\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\001\002\000\004\042\130\001\002\000\046\012" +
    "\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\022\057\023\uff96\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\121\032\uff96\034\uff96\001\002\000\010" +
    "\030\uffa3\032\uffa3\034\uffa3\001\002\000\022\023\101\024" +
    "\104\025\105\026\106\027\102\030\uffa5\032\uffa5\034\uffa5" +
    "\001\002\000\010\030\uffa4\032\uffa4\034\uffa4\001\002\000" +
    "\004\034\uffb6\001\002\000\026\031\066\032\122\042\076" +
    "\044\071\045\067\046\077\047\100\050\072\051\075\052" +
    "\113\001\002\000\010\030\uffd5\032\uffd5\034\uffd5\001\002" +
    "\000\006\030\125\032\126\001\002\000\006\030\uffa9\032" +
    "\uffa9\001\002\000\024\031\066\042\076\044\071\045\067" +
    "\046\077\047\100\050\072\051\075\052\113\001\002\000" +
    "\010\030\uffd4\032\uffd4\034\uffd4\001\002\000\006\030\uffa8" +
    "\032\uffa8\001\002\000\004\031\131\001\002\000\026\031" +
    "\066\032\132\042\076\044\071\045\067\046\077\047\100" +
    "\050\072\051\075\052\113\001\002\000\010\030\uffa2\032" +
    "\uffa2\034\uffa2\001\002\000\006\030\125\032\134\001\002" +
    "\000\010\030\uffa1\032\uffa1\034\uffa1\001\002\000\066\004" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94" +
    "\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\034\uff94\035\uff94\040\uff94\001" +
    "\002\000\030\003\161\037\145\042\152\043\042\053\144" +
    "\054\160\060\150\062\166\063\143\064\155\065\146\001" +
    "\002\000\022\003\uffe5\037\uffe5\042\uffe5\043\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\070\uffe5\001\002\000\034\003\uffdb\037" +
    "\uffdb\042\uffdb\043\uffdb\053\uffdb\054\uffdb\060\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\001\002\000" +
    "\034\003\uffe2\037\uffe2\042\uffe2\043\uffe2\053\uffe2\054\uffe2" +
    "\060\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\001\002\000\034\003\uffd9\037\uffd9\042\uffd9\043\uffd9" +
    "\053\uffd9\054\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\001\002\000\004\031\304\001\002" +
    "\000\026\031\066\033\235\034\300\042\076\044\071\045" +
    "\067\046\077\047\100\050\072\051\075\001\002\000\046" +
    "\003\uffe4\037\uffe4\042\uffe4\043\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\001\002\000" +
    "\004\031\257\001\002\000\034\003\uffda\037\uffda\042\uffda" +
    "\043\uffda\053\uffda\054\uffda\060\uffda\062\uffda\063\uffda\064" +
    "\uffda\065\uffda\066\uffda\067\uffda\001\002\000\004\031\251" +
    "\001\002\000\034\003\uffd8\037\uffd8\042\uffd8\043\uffd8\053" +
    "\uffd8\054\uffd8\060\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\001\002\000\026\004\uff95\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\011\uff95\022\uff95\031\uff95\035\uff95" +
    "\042\uff92\001\002\000\034\003\uffde\037\uffde\042\uffde\043" +
    "\uffde\053\uffde\054\uffde\060\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\067\uffde\001\002\000\024\004\063\005" +
    "\064\006\056\007\054\010\052\011\053\022\057\031\121" +
    "\035\060\001\002\000\004\036\136\001\002\000\034\003" +
    "\uffdf\037\uffdf\042\uffdf\043\uffdf\053\uffdf\054\uffdf\060\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\001" +
    "\002\000\030\003\161\037\226\042\152\043\042\053\144" +
    "\054\160\060\150\062\166\063\143\064\155\065\146\001" +
    "\002\000\004\034\224\001\002\000\010\034\222\036\136" +
    "\037\221\001\002\000\034\003\uffdd\037\uffdd\042\uffdd\043" +
    "\uffdd\053\uffdd\054\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\001\002\000\034\003\uffe0\037" +
    "\uffe0\042\uffe0\043\uffe0\053\uffe0\054\uffe0\060\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002\000" +
    "\004\042\076\001\002\000\034\003\uffdc\037\uffdc\042\uffdc" +
    "\043\uffdc\053\uffdc\054\uffdc\060\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002\000\004\031\171" +
    "\001\002\000\004\034\170\001\002\000\034\003\uffd6\037" +
    "\uffd6\042\uffd6\043\uffd6\053\uffd6\054\uffd6\060\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\001\002\000" +
    "\004\043\172\001\002\000\004\042\176\001\002\000\004" +
    "\032\174\001\002\000\004\036\136\001\002\000\034\003" +
    "\uffc9\037\uffc9\042\uffc9\043\uffc9\053\uffc9\054\uffc9\060\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001" +
    "\002\000\020\014\214\015\211\016\213\017\210\020\207" +
    "\021\215\035\216\001\002\000\004\034\200\001\002\000" +
    "\004\042\176\001\002\000\004\034\202\001\002\000\004" +
    "\042\203\001\002\000\016\004\063\005\064\006\056\007" +
    "\054\010\052\011\053\001\002\000\004\032\uffc8\001\002" +
    "\000\022\031\066\042\076\044\071\045\067\046\077\047" +
    "\100\050\072\051\075\001\002\000\016\023\101\024\104" +
    "\025\105\026\106\027\102\032\uffc7\001\002\000\022\031" +
    "\uff88\042\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\001\002\000\022\031\uff89\042\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\001\002\000\022" +
    "\031\uff8b\042\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\001\002\000\022\031\066\042\076\044\071" +
    "\045\067\046\077\047\100\050\072\051\075\001\002\000" +
    "\022\031\uff8a\042\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a" +
    "\050\uff8a\051\uff8a\001\002\000\022\031\uff8c\042\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\001\002" +
    "\000\022\031\uff87\042\uff87\044\uff87\045\uff87\046\uff87\047" +
    "\uff87\050\uff87\051\uff87\001\002\000\022\031\066\042\076" +
    "\044\071\045\067\046\077\047\100\050\072\051\075\001" +
    "\002\000\016\023\101\024\104\025\105\026\106\027\102" +
    "\034\uffc6\001\002\000\016\023\101\024\104\025\105\026" +
    "\106\027\102\034\uffc5\001\002\000\034\003\uffd2\037\uffd2" +
    "\042\uffd2\043\uffd2\053\uffd2\054\uffd2\060\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\001\002\000\044" +
    "\003\uffb8\037\uffb8\042\uffb8\043\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\066\uffb8\067\uffb8\070\uffb8\001\002\000\034\003" +
    "\uffd7\037\uffd7\042\uffd7\043\uffd7\053\uffd7\054\uffd7\060\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\001" +
    "\002\000\034\003\uffb3\037\uffb3\042\uffb3\043\uffb3\053\uffb3" +
    "\054\uffb3\060\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\067\uffb3\001\002\000\034\003\uffe1\037\uffe1\042\uffe1" +
    "\043\uffe1\053\uffe1\054\uffe1\060\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000\046\003\uffe3" +
    "\037\uffe3\042\uffe3\043\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\001\002\000\004\063" +
    "\230\001\002\000\004\031\231\001\002\000\024\031\066" +
    "\033\235\042\076\044\071\045\067\046\077\047\100\050" +
    "\072\051\075\001\002\000\010\012\245\013\246\032\243" +
    "\001\002\000\012\012\uffae\013\uffae\032\uffae\034\uffae\001" +
    "\002\000\040\012\uffac\013\uffac\014\214\015\211\016\213" +
    "\017\210\020\207\021\215\023\101\024\104\025\105\026" +
    "\106\027\102\032\uffac\034\uffac\001\002\000\004\031\236" +
    "\001\002\000\024\031\066\033\235\042\076\044\071\045" +
    "\067\046\077\047\100\050\072\051\075\001\002\000\004" +
    "\032\240\001\002\000\012\012\uffaa\013\uffaa\032\uffaa\034" +
    "\uffaa\001\002\000\022\031\066\042\076\044\071\045\067" +
    "\046\077\047\100\050\072\051\075\001\002\000\024\012" +
    "\uffab\013\uffab\023\101\024\104\025\105\026\106\027\102" +
    "\032\uffab\034\uffab\001\002\000\004\034\250\001\002\000" +
    "\024\031\066\033\235\042\076\044\071\045\067\046\077" +
    "\047\100\050\072\051\075\001\002\000\024\031\uff80\033" +
    "\uff80\042\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80" +
    "\051\uff80\001\002\000\024\031\uff7f\033\uff7f\042\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\001\002" +
    "\000\012\012\uffad\013\uffad\032\uffad\034\uffad\001\002\000" +
    "\034\003\uffca\037\uffca\042\uffca\043\uffca\053\uffca\054\uffca" +
    "\060\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\001\002\000\024\031\066\033\235\042\076\044\071" +
    "\045\067\046\077\047\100\050\072\051\075\001\002\000" +
    "\010\012\245\013\246\032\253\001\002\000\004\036\136" +
    "\001\002\000\036\003\uffc4\037\uffc4\042\uffc4\043\uffc4\053" +
    "\uffc4\054\uffc4\060\uffc4\061\255\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\001\002\000\004\036\136\001" +
    "\002\000\034\003\uffc3\037\uffc3\042\uffc3\043\uffc3\053\uffc3" +
    "\054\uffc3\060\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\001\002\000\020\042\076\044\071\045\067" +
    "\046\077\047\100\050\072\051\075\001\002\000\004\032" +
    "\261\001\002\000\004\036\262\001\002\000\006\066\266" +
    "\067\263\001\002\000\004\040\270\001\002\000\010\037" +
    "\uffd1\066\uffd1\067\uffd1\001\002\000\010\037\273\066\266" +
    "\067\263\001\002\000\020\042\076\044\071\045\067\046" +
    "\077\047\100\050\072\051\075\001\002\000\004\040\270" +
    "\001\002\000\034\003\161\037\uffcd\042\152\043\042\053" +
    "\144\054\160\060\150\062\166\063\143\064\155\065\146" +
    "\066\uffcd\067\uffcd\001\002\000\010\037\uffcf\066\uffcf\067" +
    "\uffcf\001\002\000\034\003\161\037\uffcc\042\152\043\042" +
    "\053\144\054\160\060\150\062\166\063\143\064\155\065" +
    "\146\066\uffcc\067\uffcc\001\002\000\034\003\uffd3\037\uffd3" +
    "\042\uffd3\043\uffd3\053\uffd3\054\uffd3\060\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000\010" +
    "\037\uffd0\066\uffd0\067\uffd0\001\002\000\010\037\uffce\066" +
    "\uffce\067\uffce\001\002\000\010\012\245\013\246\034\uffaf" +
    "\001\002\000\004\034\303\001\002\000\034\003\uffb2\037" +
    "\uffb2\042\uffb2\043\uffb2\053\uffb2\054\uffb2\060\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002\000" +
    "\004\034\302\001\002\000\034\003\uffb1\037\uffb1\042\uffb1" +
    "\043\uffb1\053\uffb1\054\uffb1\060\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\067\uffb1\001\002\000\034\003\uffb0" +
    "\037\uffb0\042\uffb0\043\uffb0\053\uffb0\054\uffb0\060\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\001\002" +
    "\000\024\031\066\033\235\042\076\044\071\045\067\046" +
    "\077\047\100\050\072\051\075\001\002\000\010\012\245" +
    "\013\246\032\306\001\002\000\004\036\136\001\002\000" +
    "\034\003\uffcb\037\uffcb\042\uffcb\043\uffcb\053\uffcb\054\uffcb" +
    "\060\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\001\002\000\004\036\136\001\002\000\010\032\313" +
    "\042\312\043\042\001\002\000\004\042\uff92\001\002\000" +
    "\004\036\uffc1\001\002\000\004\042\322\001\002\000\006" +
    "\030\317\032\320\001\002\000\006\030\uffa7\032\uffa7\001" +
    "\002\000\006\042\312\043\042\001\002\000\004\036\uffc2" +
    "\001\002\000\006\030\uffa6\032\uffa6\001\002\000\006\030" +
    "\uffa0\032\uffa0\001\002\000\022\003\uffe6\037\uffe6\042\uffe6" +
    "\043\uffe6\055\uffe6\056\uffe6\057\uffe6\070\uffe6\001\002\000" +
    "\004\031\311\001\002\000\022\003\uffe8\037\uffe8\042\uffe8" +
    "\043\uffe8\055\uffe8\056\uffe8\057\uffe8\070\uffe8\001\002\000" +
    "\022\003\uffbd\037\uffbd\042\uffbd\043\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\070\uffbd\001\002\000\004\034\222\001\002\000" +
    "\022\003\uffeb\037\uffeb\042\uffeb\043\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\070\uffeb\001\002\000\022\003\uffbc\037\uffbc\042" +
    "\uffbc\043\uffbc\055\uffbc\056\uffbc\057\uffbc\070\uffbc\001\002" +
    "\000\010\003\327\042\312\043\042\001\002\000\022\003" +
    "\uffbb\037\uffbb\042\uffbb\043\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\070\uffbb\001\002\000\022\003\uffbf\037\uffbf\042\uffbf\043" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\070\uffbf\001\002\000\022" +
    "\003\uffed\037\uffed\042\uffed\043\uffed\055\uffed\056\uffed\057" +
    "\uffed\070\uffed\001\002\000\014\002\ufff3\003\ufff3\055\ufff3" +
    "\071\ufff3\073\ufff3\001\002\000\022\003\ufff1\037\ufff1\042" +
    "\ufff1\043\ufff1\055\ufff1\056\ufff1\057\ufff1\070\ufff1\001\002" +
    "\000\006\022\342\034\341\001\002\000\014\002\ufff8\003" +
    "\ufff8\055\ufff8\071\ufff8\073\ufff8\001\002\000\006\023\343" +
    "\042\135\001\002\000\004\034\344\001\002\000\014\002" +
    "\ufff7\003\ufff7\055\ufff7\071\ufff7\073\ufff7\001\002\000\014" +
    "\002\ufffd\003\ufffd\055\ufffd\071\ufffd\073\ufffd\001\002\000" +
    "\014\002\ufffa\003\ufffa\055\ufffa\071\ufffa\073\ufffa\001\002" +
    "\000\014\002\000\003\012\055\007\071\017\073\015\001" +
    "\002\000\014\002\ufff5\003\ufff5\055\ufff5\071\ufff5\073\ufff5" +
    "\001\002\000\004\002\001\001\002\000\006\022\057\034" +
    "\353\001\002\000\012\003\ufff9\055\ufff9\071\ufff9\073\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\020\057\015\060\010\061\004\062\007\063" +
    "\012\064\005\065\013\001\001\000\004\010\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\347\001" +
    "\001\000\014\057\015\060\010\063\346\064\005\065\013" +
    "\001\001\000\002\001\001\000\012\057\015\060\010\064" +
    "\345\065\013\001\001\000\012\057\015\060\010\064\344" +
    "\065\013\001\001\000\002\001\001\000\004\010\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\042\025\033\026\043\027\040\043\026\045" +
    "\021\046\030\047\037\053\023\055\024\056\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\042\025\033\026\043\027\040\043\026\045\021" +
    "\046\030\047\037\053\023\056\336\001\001\000\020\007" +
    "\042\026\333\027\040\043\026\046\030\047\037\053\334" +
    "\001\001\000\002\001\001\000\004\044\307\001\001\000" +
    "\002\001\001\000\014\007\042\027\330\043\026\046\030" +
    "\047\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\163\027\325\001\001\000\004\030\136\001\001" +
    "\000\004\043\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\047\023\046\043\050" +
    "\001\001\000\002\001\001\000\004\044\307\001\001\000" +
    "\004\030\136\001\001\000\002\001\001\000\010\003\064" +
    "\004\054\024\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\113\011" +
    "\072\014\117\015\116\054\114\066\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\067\011\072\066\073\001\001\000\010" +
    "\010\067\011\072\066\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\067\011\072\066" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\102\001\001\000\004\006\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\113" +
    "\011\072\014\123\015\116\016\122\054\114\066\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\113\011\072\014\126\015\116\054\114\066" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\113\011\072\014\123\015\116\016" +
    "\132\054\114\066\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\163\010\153\021\152\023\155\027\162\031\137\032\140" +
    "\033\156\034\146\036\141\037\150\050\161\052\164\054" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\113\011\072\017\275\020\232\022\300\054\276\066\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\064\004\054\024\061\001" +
    "\001\000\004\030\226\001\001\000\002\001\001\000\034" +
    "\007\163\010\153\021\152\023\155\027\162\031\137\032" +
    "\224\034\146\036\141\037\150\050\161\052\164\054\166" +
    "\001\001\000\002\001\001\000\004\030\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\047\023\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\172\001\001\000\004" +
    "\051\176\001\001\000\002\001\001\000\004\030\174\001" +
    "\001\000\002\001\001\000\004\005\211\001\001\000\002" +
    "\001\001\000\004\051\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\204\004\203\001\001\000\002" +
    "\001\001\000\010\010\067\011\072\066\205\001\001\000" +
    "\004\006\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\067\011\072\066\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\067\011\072\066\216\001\001\000\004\006" +
    "\102\001\001\000\004\006\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\067\011\072\017\231\020\232\066" +
    "\233\001\001\000\004\002\243\001\001\000\002\001\001" +
    "\000\006\005\240\006\102\001\001\000\002\001\001\000" +
    "\012\010\067\011\072\020\236\066\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\067\011\072\066" +
    "\241\001\001\000\004\006\102\001\001\000\002\001\001" +
    "\000\012\010\067\011\072\020\246\066\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\067\011\072\017\251\020\232\066" +
    "\233\001\001\000\004\002\243\001\001\000\004\030\253" +
    "\001\001\000\002\001\001\000\004\030\255\001\001\000" +
    "\002\001\001\000\006\010\067\011\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\264\041\263\001" +
    "\001\000\004\042\274\001\001\000\002\001\001\000\004" +
    "\041\273\001\001\000\006\010\067\011\266\001\001\000" +
    "\004\042\270\001\001\000\036\007\163\010\153\021\152" +
    "\023\155\027\162\031\137\032\140\033\271\034\146\036" +
    "\141\037\150\050\161\052\164\054\166\001\001\000\002" +
    "\001\001\000\034\007\163\010\153\021\152\023\155\027" +
    "\162\031\137\032\224\034\146\036\141\037\150\050\161" +
    "\052\164\054\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\067\011\072\017\304" +
    "\020\232\066\233\001\001\000\004\002\243\001\001\000" +
    "\004\030\306\001\001\000\002\001\001\000\004\030\322" +
    "\001\001\000\010\007\313\012\314\013\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\313\013\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\163\027\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\057\015\060" +
    "\010\064\344\065\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaCodeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaCodeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaCodeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  private ParserActioner actioner;
  private String fileName;

  // constructor
  public JavaCodeParser(JavaCodeLexer lexer, String fileName) {
    super(lexer);
    actioner = new ParserActioner();
    this.fileName = fileName;
  }

  /* ERRORS METHOD */
  public void report_error(String message, Object info) {
      System.out.println("public void report_error");
  }
  
  public void report_fatal_error(String message, Object info) {
      System.out.println("public void report_fatal_error");
  }

  public void syntax_error(Symbol cur_token) {
      System.out.println("Error sym: " + sym.terminalNames[cur_token.sym] + " L:" + cur_token.left + " C:" +  cur_token.right + " file: " + this.fileName);
  }

  public void unrecovered_syntax_error(Symbol cur_token) {
      System.out.println("UNrecovered syntax error");
  }

  public ParserActioner getActioner() {
    return actioner;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaCodeParser$actions {
  private final JavaCodeParser parser;

  /** Constructor */
  CUP$JavaCodeParser$actions(JavaCodeParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaCodeParser$do_action_part00000000(
    int                        CUP$JavaCodeParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCodeParser$parser,
    java.util.Stack            CUP$JavaCodeParser$stack,
    int                        CUP$JavaCodeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaCodeParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaCodeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaCodeParser$parser.done_parsing();
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= package_structure class_data 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 actioner.saveRoot(children); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("file",47, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file ::= class_data 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 actioner.saveRoot(children); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("file",47, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_data ::= class_data_sub 
            {
              Object RESULT =null;
		int classNodeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int classNoderight = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object classNode = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT = actioner.getItemAsArray(classNode); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_data",49, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_data ::= class_data class_data_sub 
            {
              Object RESULT =null;
		int prevClassNodeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int prevClassNoderight = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object prevClassNode = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int classNodeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int classNoderight = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object classNode = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT = actioner.getArray(actioner.getItemAsArray(classNode), prevClassNode); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_data",49, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_data_sub ::= import_structure 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_data_sub",50, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_data_sub ::= class_structure 
            {
              Object RESULT =null;
		int classNodeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int classNoderight = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object classNode = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT = classNode; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_data_sub",50, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_data_sub ::= error class_data_sub 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_data_sub",50, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // package_structure ::= PACKAGE id_item SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("package_structure",48, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_structure ::= IMPORT id_item SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("import_structure",51, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_structure ::= IMPORT id_item DOT STAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("import_structure",51, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_structure ::= class_structure_sub 
            {
              Object RESULT =null;
		int classNodeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int classNoderight = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object classNode = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT = classNode; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_structure",45, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_structure ::= VISIBILITY class_structure_sub 
            {
              Object RESULT =null;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int classNodeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int classNoderight = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object classNode = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT = actioner.addAttrNode(classNode, attribute.toString()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_structure",45, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_structure_sub ::= CLASS ID BRAC_OPEN BRAC_CLOSE 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).value;
		 
            RESULT =  actioner.getNode("CLASS",variable.toString()); 
            actioner.increaseClassDeclared(variable.toString());
        
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_structure_sub",46, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_structure_sub ::= CLASS ID BRAC_OPEN class_content BRAC_CLOSE 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-3)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-3)).value;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		 
            RESULT = actioner.getNode("CLASS",variable.toString());
            actioner.saveParent(RESULT, children);
            actioner.increaseClassDeclared(variable.toString());
        
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_structure_sub",46, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_content ::= class_content_sub 
            {
              Object RESULT =null;
		int childleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object child = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getItemAsArray(child); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_content",43, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_content ::= class_content class_content_sub 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int childleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object child = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getArray(actioner.getItemAsArray(child), children); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_content",43, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_content_sub ::= method_structure 
            {
              Object RESULT =null;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=nodeMethod; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_content_sub",44, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_content_sub ::= var_declaration 
            {
              Object RESULT =null;
		int nodeDecleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeDecright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeDec = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=nodeDec; // get the node type VAL DECLARATION 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("class_content_sub",44, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_structure ::= method_extra 
            {
              Object RESULT =null;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=nodeMethod; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_structure",35, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_structure ::= VISIBILITY method_extra 
            {
              Object RESULT =null;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.addAttrNode(nodeMethod,attribute.toString().toUpperCase()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_structure",35, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_extra ::= method_structure_sub 
            {
              Object RESULT =null;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=nodeMethod; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_extra",41, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_extra ::= STATIC method_structure_sub 
            {
              Object RESULT =null;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.addAttrNode(nodeMethod, attribute.toString().toUpperCase()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_extra",41, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_structure_sub ::= constructor_structure 
            {
              Object RESULT =null;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=nodeMethod; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_structure_sub",37, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_structure_sub ::= non_constructor_structure 
            {
              Object RESULT =null;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=nodeMethod; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_structure_sub",37, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // non_constructor_structure ::= FUNC_TYPE constructor_structure 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.addAttrNode(nodeMethod, type.toString().toUpperCase()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("non_constructor_structure",36, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // non_constructor_structure ::= var_type0 constructor_structure 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int nodeMethodleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeMethodright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeMethod = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.addAttrNode(nodeMethod, type.toString().toUpperCase()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("non_constructor_structure",36, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constructor_structure ::= ID par_receive_vals function_content 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).value;
		int valsGetleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int valsGetright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object valsGet = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 
            RESULT = actioner.getNode("METHOD",variable.toString());
            actioner.saveParent(RESULT, actioner.getArray( children, valsGet));
            actioner.increaseMethodDeclared(variable.toString());
        
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("constructor_structure",33, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constructor_structure ::= error function_content 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 
            RESULT = actioner.getNode("ERROR", "error");
            actioner.saveParent(RESULT, children);
            actioner.increaseMethodDeclared("error");
        
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("constructor_structure",33, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_content ::= BRAC_OPEN BRAC_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_content",22, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_content ::= BRAC_OPEN function_parts BRAC_CLOSE 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_content",22, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_parts ::= function_part 
            {
              Object RESULT =null;
		int childleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object child = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=child; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_parts",25, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_parts ::= function_parts function_part 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int childleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object child = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getArray(child,children); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_parts",25, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_part ::= var_declaration_sub_extra 
            {
              Object RESULT =null;
		int nodeDecleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeDecright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeDec = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getItemAsArray(nodeDec); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_part",24, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_part ::= var_assign 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_part",24, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_part ::= output_sentence 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_part",24, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_part ::= method_call_structure 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_part",24, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_part ::= functions_methods 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("function_part",24, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // functions_methods ::= if_structure 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("functions_methods",40, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // functions_methods ::= for_structure 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("functions_methods",40, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // functions_methods ::= while_structure 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("functions_methods",40, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // functions_methods ::= switch_structure 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("functions_methods",40, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // functions_methods ::= error function_content 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("functions_methods",40, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_call_structure ::= method_call_structure_sub SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_call_structure",38, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_call_structure_sub ::= id_item PAR_OPEN PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_call_structure_sub",42, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_call_structure_sub ::= id_item PAR_OPEN vals_send PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("method_call_structure_sub",42, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // switch_structure ::= SWITCH PAR_OPEN element PAR_CLOSE BRAC_OPEN switch_content BRAC_CLOSE 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("switch_structure",29, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // switch_structure ::= error BRAC_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("switch_structure",29, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // switch_content ::= case_section 
            {
              Object RESULT =null;
		int childleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object child = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=child; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("switch_content",30, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // switch_content ::= switch_content case_section 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int childleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object child = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getArray(children,child); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("switch_content",30, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // case_section ::= CASE element case_content 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("case_section",31, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // case_section ::= DEFAULT case_content 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("case_section",31, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // case_content ::= COLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("case_content",32, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // case_content ::= COLON function_parts 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("case_content",32, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // while_structure ::= WHILE PAR_OPEN bool_compare PAR_CLOSE function_content 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("while_structure",28, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_structure ::= DO function_content WHILE PAR_OPEN bool_compare PAR_CLOSE SEMICOLON 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-5)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-5)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-5)).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("while_structure",28, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_structure ::= FOR PAR_OPEN for_par_content PAR_CLOSE function_content 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("for_structure",26, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for_par_content ::= VAR_TYPE for_validation SEMICOLON for_validation SEMICOLON ID sym_inc_step 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("for_par_content",27, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_par_content ::= VAR_TYPE for_validation SEMICOLON for_validation SEMICOLON ID sym_inc_asgn arithm_expr 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("for_par_content",27, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-7)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for_validation ::= ID ASSIGN arithm_expr 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("for_validation",39, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for_validation ::= ID sym_compare arithm_expr 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("for_validation",39, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_structure ::= IF PAR_OPEN bool_compare PAR_CLOSE function_content 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("if_structure",23, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_structure ::= IF PAR_OPEN bool_compare PAR_CLOSE function_content ELSE function_content 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).value;
		int children2left = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int children2right = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object children2 = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getArray(children,children2); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("if_structure",23, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // par_receive_vals ::= PAR_OPEN vals_receive PAR_CLOSE 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		 RESULT=children; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("par_receive_vals",34, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // par_receive_vals ::= PAR_OPEN PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("par_receive_vals",34, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var_declaration ::= var_declaration_sub 
            {
              Object RESULT =null;
		int nodeDecleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeDecright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeDec = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=nodeDec; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var_declaration ::= VISIBILITY var_declaration_sub 
            {
              Object RESULT =null;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int nodeDecleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeDecright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeDec = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.addAttrNode(nodeDec,attribute.toString().toUpperCase()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var_declaration_sub ::= var_declaration_sub_extra 
            {
              Object RESULT =null;
		int nodeDecleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeDecright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeDec = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=nodeDec; 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration_sub",20, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // var_declaration_sub ::= FINAL var_declaration_sub_extra 
            {
              Object RESULT =null;
		int nodeDecleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeDecright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeDec = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.addAttrNode(nodeDec,"FINAL"); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration_sub",20, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // var_declaration_sub ::= STATIC var_declaration_sub_extra 
            {
              Object RESULT =null;
		int nodeDecleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeDecright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeDec = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.addAttrNode(nodeDec, "STATIC"); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration_sub",20, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_declaration_sub ::= STATIC FINAL var_declaration_sub_extra 
            {
              Object RESULT =null;
		int nodeDecleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int nodeDecright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object nodeDec = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.addAttrNode(nodeDec, "FINAL", "STATIC"); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration_sub",20, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_declaration_sub_extra ::= var_type0 var_assign 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getNode(type.toString(), variable.toString()); actioner.increaseVarsDeclared(variable.toString()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration_sub_extra",21, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_declaration_sub_extra ::= var_type0 id_item SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		 RESULT=actioner.getNode(type.toString(), variable.toString()); actioner.increaseVarsDeclared(variable.toString()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration_sub_extra",21, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var_declaration_sub_extra ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_declaration_sub_extra",21, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var_assign ::= id_item var_assign_act SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).value;
		 RESULT=id.toString(); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_assign",17, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // var_assign_act ::= ASSIGN val_declaration_asgn 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_assign_act",18, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // var_assign_act ::= sym_inc_asgn arithm_expr 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_assign_act",18, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var_assign_act ::= sym_inc_step 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_assign_act",18, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // output_sentence ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("output_sentence",15, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // output_sentence ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("output_sentence",15, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // output_sentence ::= RETURN output_actions SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("output_sentence",15, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // output_sentence ::= RETURN method_call_structure_sub SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("output_sentence",15, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // output_actions ::= bool_compare 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("output_actions",16, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bool_compare ::= bool_compare_sub 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("bool_compare",13, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bool_compare ::= bool_compare sym_conc_bool bool_compare_sub 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("bool_compare",13, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bool_compare_sub ::= arithm_expr 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("bool_compare_sub",14, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bool_compare_sub ::= arithm_expr sym_compare arithm_expr 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("bool_compare_sub",14, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bool_compare_sub ::= NOT PAR_OPEN bool_compare_sub PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("bool_compare_sub",14, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // vals_send ::= val_declaration_asgn 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("vals_send",12, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // vals_send ::= vals_send COMMA val_declaration_asgn 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("vals_send",12, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // vals_receive ::= var_with_type 
            {
              Object RESULT =null;
		int childleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object child = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getItemAsArray(actioner.addAttrNode(child,"PARAMETER")); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("vals_receive",8, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // vals_receive ::= vals_receive COMMA var_with_type 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).right;
		Object children = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).value;
		int childleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object child = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getArray(actioner.getItemAsArray(actioner.addAttrNode(child,"PARAMETER")),children); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("vals_receive",8, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // val_declaration_asgn ::= arithm_expr 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("val_declaration_asgn",10, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // val_declaration_asgn ::= new_object_asgn 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("val_declaration_asgn",10, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // val_declaration_asgn ::= method_call_structure_sub 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("val_declaration_asgn",10, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // new_object_asgn ::= NEW ID PAR_OPEN PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("new_object_asgn",11, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // new_object_asgn ::= NEW ID PAR_OPEN vals_send PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("new_object_asgn",11, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // var_with_type ::= var_type0 ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT=actioner.getNode(type.toString(),variable.toString()); actioner.increaseVarsDeclared(variable.toString()); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_with_type",9, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // arithm_expr ::= element 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("arithm_expr",52, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // arithm_expr ::= arithm_expr sym_arithm arithm_expr 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("arithm_expr",52, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arithm_expr ::= PAR_OPEN arithm_expr PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("arithm_expr",52, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // element ::= NUMBER 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("element",7, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // element ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("element",7, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // element ::= VAL_COMILLAS 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("element",7, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // element ::= CHAR 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("element",7, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // element ::= TRUE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("element",7, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // element ::= FALSE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("element",7, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // element ::= id_item 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("element",7, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // id_item ::= ID 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object idVal = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT =  idVal.toString(); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("id_item",6, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // id_item ::= id_item DOT ID 
            {
              Object RESULT =null;
		int lastIDleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).left;
		int lastIDright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).right;
		Object lastID = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)).value;
		int idValleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object idVal = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT = lastID.toString() + "." + idVal.toString(); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("id_item",6, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.elementAt(CUP$JavaCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // var_type0 ::= VAR_TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT = type.toString(); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_type0",5, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // var_type0 ::= ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaCodeParser$stack.peek()).value;
		 RESULT = type.toString(); 
              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("var_type0",5, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sym_arithm ::= PLUS 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",4, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sym_arithm ::= MINUS 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",4, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sym_arithm ::= DIV 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",4, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sym_arithm ::= MOD 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",4, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sym_arithm ::= STAR 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_arithm",4, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sym_compare ::= GE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_compare",3, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sym_compare ::= GT 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_compare",3, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sym_compare ::= LE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_compare",3, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sym_compare ::= LT 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_compare",3, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sym_compare ::= EQ 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_compare",3, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sym_compare ::= NE 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_compare",3, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sym_inc_step ::= INC 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_inc_step",2, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sym_inc_step ::= DEC 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_inc_step",2, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sym_inc_asgn ::= PLUS_T 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_inc_asgn",1, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sym_inc_asgn ::= LESS_T 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_inc_asgn",1, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sym_inc_asgn ::= MULT_T 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_inc_asgn",1, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sym_inc_asgn ::= DIV_T 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_inc_asgn",1, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sym_conc_bool ::= AND 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_conc_bool",0, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sym_conc_bool ::= OR 
            {
              Object RESULT =null;

              CUP$JavaCodeParser$result = parser.getSymbolFactory().newSymbol("sym_conc_bool",0, ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCodeParser$stack.peek()), RESULT);
            }
          return CUP$JavaCodeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaCodeParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaCodeParser$do_action(
    int                        CUP$JavaCodeParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCodeParser$parser,
    java.util.Stack            CUP$JavaCodeParser$stack,
    int                        CUP$JavaCodeParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaCodeParser$do_action_part00000000(
                               CUP$JavaCodeParser$act_num,
                               CUP$JavaCodeParser$parser,
                               CUP$JavaCodeParser$stack,
                               CUP$JavaCodeParser$top);
    }
}

}
