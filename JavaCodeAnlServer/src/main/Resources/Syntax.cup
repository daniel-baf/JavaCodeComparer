
/***************************************/
/********** USER CODE SECTION **********/
/***************************************/

package Backend.Objects.Parsers;
import java_cup.runtime.*;
import Backend.Objects.Lexers.JavaCodeLexer;

/* Preliminaries to set up and use the scanner.  */
parser code {:

  private ParserActioner actioner;
  private String fileName;

  // constructor
  public JavaCodeParser(JavaCodeLexer lexer, String fileName) {
    super(lexer);
    actioner = new ParserActioner();
    this.fileName = fileName;
  }

  /* ERRORS METHOD */
  public void report_error(String message, Object info) {
      System.out.println("public void report_error");
  }
  
  public void report_fatal_error(String message, Object info) {
      System.out.println("public void report_fatal_error");
  }

  public void syntax_error(Symbol cur_token) {
      System.out.println("Error sym: " + sym.terminalNames[cur_token.sym] + " L:" + cur_token.left + " C:" +  cur_token.right + " file: " + this.fileName);
  }

  public void unrecovered_syntax_error(Symbol cur_token) {
      System.out.println("UNrecovered syntax error");
  }

  public ParserActioner getActioner() {
    return actioner;
  }

:}

/**************************************/
/********** TERMINAL SECTION **********/
/**************************************/
// from lexer
// symbols
terminal INC, DEC, PLUS_T, LESS_T, MULT_T, DIV_T, AND, OR, GE, GT, LE, LT, EQ, NE, DOT, STAR, PLUS, MINUS,
    DIV, MOD, COMMA, PAR_OPEN, PAR_CLOSE, NOT, SEMICOLON, ASSIGN, BRAC_OPEN, BRAC_CLOSE, COLON, UNKNOWN;
// elements
terminal ID, VAR_TYPE, NUMBER, DECIMAL,VAL_COMILLAS,CHAR,TRUE,FALSE, NEW, RETURN, BREAK, VISIBILITY, FINAL, STATIC;
// methods
terminal IF, ELSE, FOR, WHILE, DO, SWITCH, CASE, DEFAULT, FUNC_TYPE, CLASS, PACKAGE, IMPORT;

// symbols
non terminal sym_conc_bool, sym_inc_asgn, sym_inc_step, sym_compare, sym_arithm, var_type0;
// items
non terminal id_item, element;
// methods
non terminal vals_receive, var_with_type, val_declaration_asgn, new_object_asgn, vals_send, bool_compare, bool_compare_sub, 
    output_sentence, output_actions, var_assign, var_assign_act, var_declaration, var_declaration_sub, var_declaration_sub_extra,
    function_content, if_structure, function_part, function_parts, for_structure, for_par_content, while_structure, switch_structure,
    switch_content, case_section, case_content, constructor_structure, par_receive_vals, method_structure, non_constructor_structure,
    method_structure_sub, method_call_structure, for_validation, functions_methods, method_extra, method_call_structure_sub;
// class
non terminal class_content, class_content_sub, class_structure, class_structure_sub, file,  package_structure, class_data, class_data_sub,
    import_structure;

// math
non terminal arithm_expr;


precedence left PLUS, MINUS;
precedence left DIV, MOD, STAR;
precedence left PAR_OPEN, PAR_CLOSE;

start with file;

file::=
    package_structure class_data:children {: actioner.saveRoot(children); :}
  | class_data:children {: actioner.saveRoot(children); :}
;

class_data::=
    class_data_sub:classNode                            {: RESULT = actioner.getItemAsArray(classNode); :} // return class
  | class_data:prevClassNode class_data_sub:classNode   {: RESULT = actioner.getArray(actioner.getItemAsArray(classNode), prevClassNode); :}
;

class_data_sub::=
    import_structure
  | class_structure:classNode               {: RESULT = classNode; :} // class node
  | error class_data_sub
;

// package
package_structure::=
  PACKAGE id_item SEMICOLON
;

// import
import_structure::=
    IMPORT id_item SEMICOLON
  | IMPORT id_item DOT STAR SEMICOLON
;

// class
class_structure::=
    class_structure_sub:classNode                      {: RESULT = classNode; :}
  | VISIBILITY:attribute class_structure_sub:classNode {: RESULT = actioner.addAttrNode(classNode, attribute.toString()); :}
;

class_structure_sub::=
    CLASS ID:variable BRAC_OPEN BRAC_CLOSE                          
        {: 
            RESULT =  actioner.getNode("CLASS",variable.toString()); 
            actioner.increaseClassDeclared(variable.toString());
        :}
  | CLASS ID:variable BRAC_OPEN class_content:children BRAC_CLOSE   
        {: 
            RESULT = actioner.getNode("CLASS",variable.toString());
            actioner.saveParent(RESULT, children);
            actioner.increaseClassDeclared(variable.toString());
        :}
;

class_content::=
    class_content_sub:child                         {: RESULT=actioner.getItemAsArray(child); :}
  | class_content:children class_content_sub:child  {: RESULT=actioner.getArray(actioner.getItemAsArray(child), children); :}
;

class_content_sub::=
    method_structure:nodeMethod {: RESULT=nodeMethod; :}
  | var_declaration:nodeDec     {: RESULT=nodeDec; // get the node type VAL DECLARATION :}
;

// method declaration
method_structure::=
    method_extra:nodeMethod                       {: RESULT=nodeMethod; :}
  | VISIBILITY:attribute method_extra:nodeMethod  {: RESULT=actioner.addAttrNode(nodeMethod,attribute.toString().toUpperCase()); :}
;

method_extra::=
    method_structure_sub:nodeMethod                   {: RESULT=nodeMethod; :}
  | STATIC:attribute method_structure_sub:nodeMethod  {: RESULT=actioner.addAttrNode(nodeMethod, attribute.toString().toUpperCase()); :}
;

method_structure_sub::=
    constructor_structure:nodeMethod        {: RESULT=nodeMethod; :}
  | non_constructor_structure:nodeMethod    {: RESULT=nodeMethod; :}
;

non_constructor_structure::=
    FUNC_TYPE:type constructor_structure:nodeMethod    {: RESULT=actioner.addAttrNode(nodeMethod, type.toString().toUpperCase()); :}
  | var_type0:type constructor_structure:nodeMethod    {: RESULT=actioner.addAttrNode(nodeMethod, type.toString().toUpperCase()); :}
;

constructor_structure::=
    ID:variable par_receive_vals:valsGet function_content:children  
        {: 
            RESULT = actioner.getNode("METHOD",variable.toString());
            actioner.saveParent(RESULT, actioner.getArray( children, valsGet));
            actioner.increaseMethodDeclared(variable.toString());
        :}
  | error function_content:children
        {: 
            RESULT = actioner.getNode("ERROR", "error");
            actioner.saveParent(RESULT, children);
            actioner.increaseMethodDeclared("error");
        :}
;

// method common
function_content::=
    BRAC_OPEN BRAC_CLOSE                            
  | BRAC_OPEN function_parts:children BRAC_CLOSE  {: RESULT=children; :}
;

function_parts::=
    function_part:child                             {: RESULT=child; :}
  | function_parts:children function_part:child     {: RESULT=actioner.getArray(child,children); :}
;

function_part::=
    var_declaration_sub_extra:nodeDec       {: RESULT=actioner.getItemAsArray(nodeDec); :}
  | var_assign
  | output_sentence
  | method_call_structure
  | functions_methods:children              {: RESULT=children; :}
;

functions_methods::=
    if_structure:children               {: RESULT=children; :}
  | for_structure:children              {: RESULT=children; :}
  | while_structure:children            {: RESULT=children; :}
  | switch_structure:children           {: RESULT=children; :}
  | error function_content:children     
;

method_call_structure::=
  method_call_structure_sub SEMICOLON
;

method_call_structure_sub::=
    id_item PAR_OPEN PAR_CLOSE
  | id_item PAR_OPEN vals_send PAR_CLOSE
;

// methods structures
switch_structure::=
    SWITCH PAR_OPEN element PAR_CLOSE BRAC_OPEN switch_content:children BRAC_CLOSE {: RESULT=children; :}
  | error BRAC_CLOSE
;

switch_content::=
    case_section:child                          {: RESULT=child; :} // array
  | switch_content:children case_section:child  {: RESULT=actioner.getArray(children,child); :}
;

case_section::=
    CASE element case_content:children      {: RESULT=children; :}
  | DEFAULT case_content:children           {: RESULT=children; :}
;

case_content::=
    COLON
  | COLON function_parts:children    {: RESULT=children; :}
;

while_structure::=
    WHILE PAR_OPEN bool_compare PAR_CLOSE function_content:children                 {: RESULT=children; :}
  | DO function_content:children WHILE PAR_OPEN bool_compare PAR_CLOSE SEMICOLON    {: RESULT=children; :}
;


for_structure::=
  FOR PAR_OPEN for_par_content PAR_CLOSE function_content:children      {: RESULT=children; :}
;

for_par_content::=
    VAR_TYPE for_validation SEMICOLON for_validation SEMICOLON ID sym_inc_step
  | VAR_TYPE for_validation SEMICOLON for_validation SEMICOLON ID sym_inc_asgn arithm_expr
;

for_validation::=
    ID ASSIGN arithm_expr
  | ID sym_compare arithm_expr
;



if_structure::=
    IF PAR_OPEN bool_compare PAR_CLOSE function_content:children  {: RESULT=children; :} // is an arraylist
  | IF PAR_OPEN bool_compare PAR_CLOSE function_content:children ELSE function_content:children2 {: RESULT=actioner.getArray(children,children2); :}
;


// into methods
par_receive_vals::=
    PAR_OPEN vals_receive:children PAR_CLOSE            {: RESULT=children; :}
  | PAR_OPEN PAR_CLOSE
;


var_declaration::=
    var_declaration_sub:nodeDec                         {: RESULT=nodeDec; :}
  | VISIBILITY:attribute var_declaration_sub:nodeDec    {: RESULT=actioner.addAttrNode(nodeDec,attribute.toString().toUpperCase()); :}
;

var_declaration_sub::=
    var_declaration_sub_extra:nodeDec                   {: RESULT=nodeDec; :}
  | FINAL var_declaration_sub_extra:nodeDec             {: RESULT=actioner.addAttrNode(nodeDec,"FINAL"); :}
  | STATIC var_declaration_sub_extra:nodeDec            {: RESULT=actioner.addAttrNode(nodeDec, "STATIC"); :}
  | STATIC FINAL var_declaration_sub_extra:nodeDec      {: RESULT=actioner.addAttrNode(nodeDec, "FINAL", "STATIC"); :}
;

var_declaration_sub_extra::=
    var_type0:type var_assign:variable              {: RESULT=actioner.getNode(type.toString(), variable.toString()); actioner.increaseVarsDeclared(variable.toString()); :}
  | var_type0:type id_item:variable SEMICOLON       {: RESULT=actioner.getNode(type.toString(), variable.toString()); actioner.increaseVarsDeclared(variable.toString()); :}
  | error SEMICOLON                                 
;

var_assign::=
  id_item:id var_assign_act SEMICOLON               {: RESULT=id.toString(); :}
;

var_assign_act::=
    ASSIGN val_declaration_asgn               
  | sym_inc_asgn arithm_expr                  
  | sym_inc_step                            
;

output_sentence::=
    BREAK SEMICOLON                
  | RETURN SEMICOLON               
  | RETURN output_actions SEMICOLON
  | RETURN method_call_structure_sub SEMICOLON
;

output_actions::=
    bool_compare
;

bool_compare::=
      bool_compare_sub
    | bool_compare sym_conc_bool bool_compare_sub
;

bool_compare_sub::=
    arithm_expr
  | arithm_expr sym_compare arithm_expr
  | NOT PAR_OPEN bool_compare_sub PAR_CLOSE
;

vals_send::=
    val_declaration_asgn
  | vals_send COMMA val_declaration_asgn
;

vals_receive::=
    var_with_type:child                                 {: RESULT=actioner.getItemAsArray(actioner.addAttrNode(child,"PARAMETER")); :}
  | vals_receive:children COMMA var_with_type:child     {: RESULT=actioner.getArray(actioner.getItemAsArray(actioner.addAttrNode(child,"PARAMETER")),children); :}
;

val_declaration_asgn::=
    arithm_expr
  | new_object_asgn
  | method_call_structure_sub
;

new_object_asgn::=
    NEW ID PAR_OPEN PAR_CLOSE
  | NEW ID PAR_OPEN vals_send PAR_CLOSE
;

var_with_type::= 
  var_type0:type ID:variable  {: RESULT=actioner.getNode(type.toString(),variable.toString()); actioner.increaseVarsDeclared(variable.toString()); :}
;

arithm_expr::=
    element
  | arithm_expr sym_arithm arithm_expr
  | PAR_OPEN arithm_expr PAR_CLOSE
;

element::=
    NUMBER      
  | DECIMAL     
  | VAL_COMILLAS
  | CHAR        
  | TRUE        
  | FALSE       
  | id_item     
;

id_item::= // catch multiple ids as k or k.a or k.b.c...
    ID:idVal                    {: RESULT =  idVal.toString(); :}
  | id_item:lastID DOT ID:idVal {: RESULT = lastID.toString() + "." + idVal.toString(); :}
;

var_type0::= // the type of the variables
    VAR_TYPE:type {: RESULT = type.toString(); :}
  | ID:type       {: RESULT = type.toString(); :}
;

sym_arithm::=
    PLUS 
  | MINUS
  | DIV  
  | MOD  
  | STAR 
;

sym_compare::=
    GE
  | GT
  | LE
  | LT
  | EQ
  | NE
;

sym_inc_step::=
    INC
  | DEC
;

sym_inc_asgn::=
    PLUS_T
  | LESS_T
  | MULT_T 
  | DIV_T 
;

sym_conc_bool::=
    AND
  | OR 
;